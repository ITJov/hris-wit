// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: client.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one
INSERT INTO client (
    client_name, shipment_address, billing_address,
    created_at, created_by
) VALUES (
     $1, $2, $3,
    (now() at time zone 'UTC')::TIMESTAMP, $4
) RETURNING client_id
`

type CreateClientParams struct {
	ClientName      sql.NullString `json:"client_name"`
	ShipmentAddress sql.NullString `json:"shipment_address"`
	BillingAddress  sql.NullString `json:"billing_address"`
	CreatedBy       string         `json:"created_by"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ClientName,
		arg.ShipmentAddress,
		arg.BillingAddress,
		arg.CreatedBy,
	)
	var client_id string
	err := row.Scan(&client_id)
	return client_id, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, client_id, client_name, shipment_address, billing_address, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM client
WHERE client_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetClientByID(ctx context.Context, clientID string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, clientID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientName,
		&i.ShipmentAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, client_id, client_name, shipment_address, billing_address, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM client
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ClientName,
			&i.ShipmentAddress,
			&i.BillingAddress,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreClient = `-- name: RestoreClient :exec
UPDATE client
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE client_id = $1
`

func (q *Queries) RestoreClient(ctx context.Context, clientID string) error {
	_, err := q.db.ExecContext(ctx, restoreClient, clientID)
	return err
}

const softDeleteClient = `-- name: SoftDeleteClient :exec
UPDATE client
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE client_id = $2
  AND deleted_at IS NULL
`

type SoftDeleteClientParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	ClientID  string         `json:"client_id"`
}

func (q *Queries) SoftDeleteClient(ctx context.Context, arg SoftDeleteClientParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteClient, arg.DeletedBy, arg.ClientID)
	return err
}

const updateClient = `-- name: UpdateClient :one
UPDATE client
SET
    client_name = $1,
    shipment_address = $2,
    billing_address = $3,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $4
WHERE client_id = $5
  AND deleted_at IS NULL
RETURNING id, client_id, client_name, shipment_address, billing_address, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateClientParams struct {
	ClientName      sql.NullString `json:"client_name"`
	ShipmentAddress sql.NullString `json:"shipment_address"`
	BillingAddress  sql.NullString `json:"billing_address"`
	UpdatedBy       sql.NullString `json:"updated_by"`
	ClientID        string         `json:"client_id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ClientName,
		arg.ShipmentAddress,
		arg.BillingAddress,
		arg.UpdatedBy,
		arg.ClientID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientName,
		&i.ShipmentAddress,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
