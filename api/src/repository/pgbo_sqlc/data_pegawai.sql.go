// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: data_pegawai.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createDataPegawai = `-- name: CreateDataPegawai :one
INSERT INTO data_pegawai (
    id_data_pegawai, employee_number, divisi, nama_lengkap, tempat_lahir, tgl_lahir,
    jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, gaji,
    status_menikah, no_ktp, no_npwp, status, created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6,
    $7, $8, $9, $10, $11, $12, $13,
    $14, $15, $16, $17, (now() at time zone 'UTC')::TIMESTAMP, $18
) RETURNING id, id_data_pegawai, employee_number, divisi, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, gaji, status_menikah, no_ktp, no_npwp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateDataPegawaiParams struct {
	IDDataPegawai   string         `json:"id_data_pegawai"`
	EmployeeNumber  string         `json:"employee_number"`
	Divisi          sql.NullString `json:"divisi"`
	NamaLengkap     string         `json:"nama_lengkap"`
	TempatLahir     sql.NullString `json:"tempat_lahir"`
	TglLahir        sql.NullTime   `json:"tgl_lahir"`
	JenisKelamin    interface{}    `json:"jenis_kelamin"`
	Kewarganegaraan sql.NullString `json:"kewarganegaraan"`
	Phone           sql.NullString `json:"phone"`
	Mobile          sql.NullString `json:"mobile"`
	Agama           sql.NullString `json:"agama"`
	GolDarah        sql.NullString `json:"gol_darah"`
	Gaji            sql.NullString `json:"gaji"`
	StatusMenikah   sql.NullBool   `json:"status_menikah"`
	NoKtp           sql.NullString `json:"no_ktp"`
	NoNpwp          sql.NullString `json:"no_npwp"`
	Status          interface{}    `json:"status"`
	CreatedBy       string         `json:"created_by"`
}

func (q *Queries) CreateDataPegawai(ctx context.Context, arg CreateDataPegawaiParams) (DataPegawai, error) {
	row := q.db.QueryRowContext(ctx, createDataPegawai,
		arg.IDDataPegawai,
		arg.EmployeeNumber,
		arg.Divisi,
		arg.NamaLengkap,
		arg.TempatLahir,
		arg.TglLahir,
		arg.JenisKelamin,
		arg.Kewarganegaraan,
		arg.Phone,
		arg.Mobile,
		arg.Agama,
		arg.GolDarah,
		arg.Gaji,
		arg.StatusMenikah,
		arg.NoKtp,
		arg.NoNpwp,
		arg.Status,
		arg.CreatedBy,
	)
	var i DataPegawai
	err := row.Scan(
		&i.ID,
		&i.IDDataPegawai,
		&i.EmployeeNumber,
		&i.Divisi,
		&i.NamaLengkap,
		&i.TempatLahir,
		&i.TglLahir,
		&i.JenisKelamin,
		&i.Kewarganegaraan,
		&i.Phone,
		&i.Mobile,
		&i.Agama,
		&i.GolDarah,
		&i.Gaji,
		&i.StatusMenikah,
		&i.NoKtp,
		&i.NoNpwp,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getDataPegawaiByID = `-- name: GetDataPegawaiByID :one
SELECT id, id_data_pegawai, employee_number, divisi, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, gaji, status_menikah, no_ktp, no_npwp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM data_pegawai
WHERE id_data_pegawai = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetDataPegawaiByID(ctx context.Context, idDataPegawai string) (DataPegawai, error) {
	row := q.db.QueryRowContext(ctx, getDataPegawaiByID, idDataPegawai)
	var i DataPegawai
	err := row.Scan(
		&i.ID,
		&i.IDDataPegawai,
		&i.EmployeeNumber,
		&i.Divisi,
		&i.NamaLengkap,
		&i.TempatLahir,
		&i.TglLahir,
		&i.JenisKelamin,
		&i.Kewarganegaraan,
		&i.Phone,
		&i.Mobile,
		&i.Agama,
		&i.GolDarah,
		&i.Gaji,
		&i.StatusMenikah,
		&i.NoKtp,
		&i.NoNpwp,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listDataPegawai = `-- name: ListDataPegawai :many
SELECT id, id_data_pegawai, employee_number, divisi, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, gaji, status_menikah, no_ktp, no_npwp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM data_pegawai
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListDataPegawai(ctx context.Context) ([]DataPegawai, error) {
	rows, err := q.db.QueryContext(ctx, listDataPegawai)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataPegawai
	for rows.Next() {
		var i DataPegawai
		if err := rows.Scan(
			&i.ID,
			&i.IDDataPegawai,
			&i.EmployeeNumber,
			&i.Divisi,
			&i.NamaLengkap,
			&i.TempatLahir,
			&i.TglLahir,
			&i.JenisKelamin,
			&i.Kewarganegaraan,
			&i.Phone,
			&i.Mobile,
			&i.Agama,
			&i.GolDarah,
			&i.Gaji,
			&i.StatusMenikah,
			&i.NoKtp,
			&i.NoNpwp,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreDataPegawai = `-- name: RestoreDataPegawai :exec
UPDATE data_pegawai
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_data_pegawai = $1
`

func (q *Queries) RestoreDataPegawai(ctx context.Context, idDataPegawai string) error {
	_, err := q.db.ExecContext(ctx, restoreDataPegawai, idDataPegawai)
	return err
}

const softDeleteDataPegawai = `-- name: SoftDeleteDataPegawai :exec
UPDATE data_pegawai
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_data_pegawai = $2
  AND deleted_at IS NULL
`

type SoftDeleteDataPegawaiParams struct {
	DeletedBy     sql.NullString `json:"deleted_by"`
	IDDataPegawai string         `json:"id_data_pegawai"`
}

func (q *Queries) SoftDeleteDataPegawai(ctx context.Context, arg SoftDeleteDataPegawaiParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteDataPegawai, arg.DeletedBy, arg.IDDataPegawai)
	return err
}

const updateDataPegawai = `-- name: UpdateDataPegawai :one
UPDATE data_pegawai
SET
    employee_number = $1,
    divisi = $2,
    nama_lengkap = $3,
    tempat_lahir = $4,
    tgl_lahir = $5,
    jenis_kelamin = $6,
    kewarganegaraan = $7,
    phone = $8,
    mobile = $9,
    agama = $10,
    gol_darah = $11,
    gaji = $12,
    status_menikah = $13,
    no_ktp = $14,
    no_npwp = $15,
    status = $16,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $17
WHERE id_data_pegawai = $18
  AND deleted_at IS NULL
    RETURNING id, id_data_pegawai, employee_number, divisi, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, gaji, status_menikah, no_ktp, no_npwp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateDataPegawaiParams struct {
	EmployeeNumber  string         `json:"employee_number"`
	Divisi          sql.NullString `json:"divisi"`
	NamaLengkap     string         `json:"nama_lengkap"`
	TempatLahir     sql.NullString `json:"tempat_lahir"`
	TglLahir        sql.NullTime   `json:"tgl_lahir"`
	JenisKelamin    interface{}    `json:"jenis_kelamin"`
	Kewarganegaraan sql.NullString `json:"kewarganegaraan"`
	Phone           sql.NullString `json:"phone"`
	Mobile          sql.NullString `json:"mobile"`
	Agama           sql.NullString `json:"agama"`
	GolDarah        sql.NullString `json:"gol_darah"`
	Gaji            sql.NullString `json:"gaji"`
	StatusMenikah   sql.NullBool   `json:"status_menikah"`
	NoKtp           sql.NullString `json:"no_ktp"`
	NoNpwp          sql.NullString `json:"no_npwp"`
	Status          interface{}    `json:"status"`
	UpdatedBy       sql.NullString `json:"updated_by"`
	IDDataPegawai   string         `json:"id_data_pegawai"`
}

func (q *Queries) UpdateDataPegawai(ctx context.Context, arg UpdateDataPegawaiParams) (DataPegawai, error) {
	row := q.db.QueryRowContext(ctx, updateDataPegawai,
		arg.EmployeeNumber,
		arg.Divisi,
		arg.NamaLengkap,
		arg.TempatLahir,
		arg.TglLahir,
		arg.JenisKelamin,
		arg.Kewarganegaraan,
		arg.Phone,
		arg.Mobile,
		arg.Agama,
		arg.GolDarah,
		arg.Gaji,
		arg.StatusMenikah,
		arg.NoKtp,
		arg.NoNpwp,
		arg.Status,
		arg.UpdatedBy,
		arg.IDDataPegawai,
	)
	var i DataPegawai
	err := row.Scan(
		&i.ID,
		&i.IDDataPegawai,
		&i.EmployeeNumber,
		&i.Divisi,
		&i.NamaLengkap,
		&i.TempatLahir,
		&i.TglLahir,
		&i.JenisKelamin,
		&i.Kewarganegaraan,
		&i.Phone,
		&i.Mobile,
		&i.Agama,
		&i.GolDarah,
		&i.Gaji,
		&i.StatusMenikah,
		&i.NoKtp,
		&i.NoNpwp,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
