// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pegawai_penguasaan_bahasa.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPegawaiPenguasaanBahasa = `-- name: CreatePegawaiPenguasaanBahasa :one
INSERT INTO pegawai_penguasaan_bahasa (
    id_bahasa, id_pegawai, bahasa, lisan, tulisan, keterangan,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6,
    (now() at time zone 'UTC')::TIMESTAMP, $7
) RETURNING id, id_bahasa, id_pegawai, bahasa, lisan, tulisan, keterangan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePegawaiPenguasaanBahasaParams struct {
	IDBahasa   string         `json:"id_bahasa"`
	IDPegawai  string         `json:"id_pegawai"`
	Bahasa     string         `json:"bahasa"`
	Lisan      sql.NullString `json:"lisan"`
	Tulisan    sql.NullString `json:"tulisan"`
	Keterangan sql.NullString `json:"keterangan"`
	CreatedBy  string         `json:"created_by"`
}

func (q *Queries) CreatePegawaiPenguasaanBahasa(ctx context.Context, arg CreatePegawaiPenguasaanBahasaParams) (PegawaiPenguasaanBahasa, error) {
	row := q.db.QueryRowContext(ctx, createPegawaiPenguasaanBahasa,
		arg.IDBahasa,
		arg.IDPegawai,
		arg.Bahasa,
		arg.Lisan,
		arg.Tulisan,
		arg.Keterangan,
		arg.CreatedBy,
	)
	var i PegawaiPenguasaanBahasa
	err := row.Scan(
		&i.ID,
		&i.IDBahasa,
		&i.IDPegawai,
		&i.Bahasa,
		&i.Lisan,
		&i.Tulisan,
		&i.Keterangan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPegawaiPenguasaanBahasaByID = `-- name: GetPegawaiPenguasaanBahasaByID :one
SELECT id, id_bahasa, id_pegawai, bahasa, lisan, tulisan, keterangan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_penguasaan_bahasa
WHERE id_bahasa = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPegawaiPenguasaanBahasaByID(ctx context.Context, idBahasa string) (PegawaiPenguasaanBahasa, error) {
	row := q.db.QueryRowContext(ctx, getPegawaiPenguasaanBahasaByID, idBahasa)
	var i PegawaiPenguasaanBahasa
	err := row.Scan(
		&i.ID,
		&i.IDBahasa,
		&i.IDPegawai,
		&i.Bahasa,
		&i.Lisan,
		&i.Tulisan,
		&i.Keterangan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPegawaiPenguasaanBahasa = `-- name: ListPegawaiPenguasaanBahasa :many
SELECT id, id_bahasa, id_pegawai, bahasa, lisan, tulisan, keterangan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_penguasaan_bahasa
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPegawaiPenguasaanBahasa(ctx context.Context) ([]PegawaiPenguasaanBahasa, error) {
	rows, err := q.db.QueryContext(ctx, listPegawaiPenguasaanBahasa)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PegawaiPenguasaanBahasa
	for rows.Next() {
		var i PegawaiPenguasaanBahasa
		if err := rows.Scan(
			&i.ID,
			&i.IDBahasa,
			&i.IDPegawai,
			&i.Bahasa,
			&i.Lisan,
			&i.Tulisan,
			&i.Keterangan,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePegawaiPenguasaanBahasa = `-- name: RestorePegawaiPenguasaanBahasa :exec
UPDATE pegawai_penguasaan_bahasa
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_bahasa = $1
`

func (q *Queries) RestorePegawaiPenguasaanBahasa(ctx context.Context, idBahasa string) error {
	_, err := q.db.ExecContext(ctx, restorePegawaiPenguasaanBahasa, idBahasa)
	return err
}

const softDeletePegawaiPenguasaanBahasa = `-- name: SoftDeletePegawaiPenguasaanBahasa :exec
UPDATE pegawai_penguasaan_bahasa
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_bahasa = $2
  AND deleted_at IS NULL
`

type SoftDeletePegawaiPenguasaanBahasaParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	IDBahasa  string         `json:"id_bahasa"`
}

func (q *Queries) SoftDeletePegawaiPenguasaanBahasa(ctx context.Context, arg SoftDeletePegawaiPenguasaanBahasaParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePegawaiPenguasaanBahasa, arg.DeletedBy, arg.IDBahasa)
	return err
}

const updatePegawaiPenguasaanBahasa = `-- name: UpdatePegawaiPenguasaanBahasa :one
UPDATE pegawai_penguasaan_bahasa
SET
    bahasa = $1,
    lisan = $2,
    tulisan = $3,
    keterangan = $4,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $5
WHERE id_bahasa = $6
  AND deleted_at IS NULL
    RETURNING id, id_bahasa, id_pegawai, bahasa, lisan, tulisan, keterangan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePegawaiPenguasaanBahasaParams struct {
	Bahasa     string         `json:"bahasa"`
	Lisan      sql.NullString `json:"lisan"`
	Tulisan    sql.NullString `json:"tulisan"`
	Keterangan sql.NullString `json:"keterangan"`
	UpdatedBy  sql.NullString `json:"updated_by"`
	IDBahasa   string         `json:"id_bahasa"`
}

func (q *Queries) UpdatePegawaiPenguasaanBahasa(ctx context.Context, arg UpdatePegawaiPenguasaanBahasaParams) (PegawaiPenguasaanBahasa, error) {
	row := q.db.QueryRowContext(ctx, updatePegawaiPenguasaanBahasa,
		arg.Bahasa,
		arg.Lisan,
		arg.Tulisan,
		arg.Keterangan,
		arg.UpdatedBy,
		arg.IDBahasa,
	)
	var i PegawaiPenguasaanBahasa
	err := row.Scan(
		&i.ID,
		&i.IDBahasa,
		&i.IDPegawai,
		&i.Bahasa,
		&i.Lisan,
		&i.Tulisan,
		&i.Keterangan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
