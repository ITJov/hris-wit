// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pelamar_keluarga.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPelamarKeluarga = `-- name: CreatePelamarKeluarga :one
INSERT INTO pelamar_keluarga (
    id_keluarga, id_pelamar, nama_istri_suami, jenis_kelamin, tempat_lahir,
    tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8, $9,
    (now() at time zone 'UTC')::TIMESTAMP, $10
) RETURNING id, id_keluarga, id_pelamar, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePelamarKeluargaParams struct {
	IDKeluarga         string         `json:"id_keluarga"`
	IDPelamar          string         `json:"id_pelamar"`
	NamaIstriSuami     sql.NullString `json:"nama_istri_suami"`
	JenisKelamin       interface{}    `json:"jenis_kelamin"`
	TempatLahir        sql.NullString `json:"tempat_lahir"`
	TglLahir           sql.NullTime   `json:"tgl_lahir"`
	PendidikanTerakhir sql.NullString `json:"pendidikan_terakhir"`
	PekerjaanSkrg      sql.NullString `json:"pekerjaan_skrg"`
	AlamatRumah        sql.NullString `json:"alamat_rumah"`
	CreatedBy          string         `json:"created_by"`
}

func (q *Queries) CreatePelamarKeluarga(ctx context.Context, arg CreatePelamarKeluargaParams) (PelamarKeluarga, error) {
	row := q.db.QueryRowContext(ctx, createPelamarKeluarga,
		arg.IDKeluarga,
		arg.IDPelamar,
		arg.NamaIstriSuami,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.TglLahir,
		arg.PendidikanTerakhir,
		arg.PekerjaanSkrg,
		arg.AlamatRumah,
		arg.CreatedBy,
	)
	var i PelamarKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPelamar,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPelamarKeluargaByID = `-- name: GetPelamarKeluargaByID :one
SELECT id, id_keluarga, id_pelamar, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_keluarga WHERE id_keluarga = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPelamarKeluargaByID(ctx context.Context, idKeluarga string) (PelamarKeluarga, error) {
	row := q.db.QueryRowContext(ctx, getPelamarKeluargaByID, idKeluarga)
	var i PelamarKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPelamar,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPelamarKeluarga = `-- name: ListPelamarKeluarga :many
SELECT id, id_keluarga, id_pelamar, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_keluarga WHERE deleted_at IS NULL ORDER BY created_at DESC
`

func (q *Queries) ListPelamarKeluarga(ctx context.Context) ([]PelamarKeluarga, error) {
	rows, err := q.db.QueryContext(ctx, listPelamarKeluarga)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarKeluarga
	for rows.Next() {
		var i PelamarKeluarga
		if err := rows.Scan(
			&i.ID,
			&i.IDKeluarga,
			&i.IDPelamar,
			&i.NamaIstriSuami,
			&i.JenisKelamin,
			&i.TempatLahir,
			&i.TglLahir,
			&i.PendidikanTerakhir,
			&i.PekerjaanSkrg,
			&i.AlamatRumah,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePelamarKeluarga = `-- name: RestorePelamarKeluarga :exec
UPDATE pelamar_keluarga
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_keluarga = $1
`

func (q *Queries) RestorePelamarKeluarga(ctx context.Context, idKeluarga string) error {
	_, err := q.db.ExecContext(ctx, restorePelamarKeluarga, idKeluarga)
	return err
}

const softDeletePelamarKeluarga = `-- name: SoftDeletePelamarKeluarga :exec
UPDATE pelamar_keluarga
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_keluarga = $2 AND deleted_at IS NULL
`

type SoftDeletePelamarKeluargaParams struct {
	DeletedBy  sql.NullString `json:"deleted_by"`
	IDKeluarga string         `json:"id_keluarga"`
}

func (q *Queries) SoftDeletePelamarKeluarga(ctx context.Context, arg SoftDeletePelamarKeluargaParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePelamarKeluarga, arg.DeletedBy, arg.IDKeluarga)
	return err
}

const updatePelamarKeluarga = `-- name: UpdatePelamarKeluarga :one
UPDATE pelamar_keluarga
SET
    nama_istri_suami = $1,
    jenis_kelamin = $2,
    tempat_lahir = $3,
    tgl_lahir = $4,
    pendidikan_terakhir = $5,
    pekerjaan_skrg = $6,
    alamat_rumah = $7,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $8
WHERE id_keluarga = $9 AND deleted_at IS NULL
    RETURNING id, id_keluarga, id_pelamar, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePelamarKeluargaParams struct {
	NamaIstriSuami     sql.NullString `json:"nama_istri_suami"`
	JenisKelamin       interface{}    `json:"jenis_kelamin"`
	TempatLahir        sql.NullString `json:"tempat_lahir"`
	TglLahir           sql.NullTime   `json:"tgl_lahir"`
	PendidikanTerakhir sql.NullString `json:"pendidikan_terakhir"`
	PekerjaanSkrg      sql.NullString `json:"pekerjaan_skrg"`
	AlamatRumah        sql.NullString `json:"alamat_rumah"`
	UpdatedBy          sql.NullString `json:"updated_by"`
	IDKeluarga         string         `json:"id_keluarga"`
}

func (q *Queries) UpdatePelamarKeluarga(ctx context.Context, arg UpdatePelamarKeluargaParams) (PelamarKeluarga, error) {
	row := q.db.QueryRowContext(ctx, updatePelamarKeluarga,
		arg.NamaIstriSuami,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.TglLahir,
		arg.PendidikanTerakhir,
		arg.PekerjaanSkrg,
		arg.AlamatRumah,
		arg.UpdatedBy,
		arg.IDKeluarga,
	)
	var i PelamarKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPelamar,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
