// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lowongan_pekerjaan.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createLowonganPekerjaan = `-- name: CreateLowonganPekerjaan :one
INSERT INTO lowongan_pekerjaan (
    id_lowongan_pekerjaan, posisi, tgl_buka_lowongan, tgl_tutup_lowongan,
    kriteria, deskripsi, link_lowongan, created_at, created_by
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7, (now() at time zone 'UTC')::TIMESTAMP, $8
) RETURNING id, id_lowongan_pekerjaan, posisi, tgl_buka_lowongan, tgl_tutup_lowongan, kriteria, deskripsi, link_lowongan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateLowonganPekerjaanParams struct {
	IDLowonganPekerjaan string         `json:"id_lowongan_pekerjaan"`
	Posisi              string         `json:"posisi"`
	TglBukaLowongan     time.Time      `json:"tgl_buka_lowongan"`
	TglTutupLowongan    time.Time      `json:"tgl_tutup_lowongan"`
	Kriteria            sql.NullString `json:"kriteria"`
	Deskripsi           sql.NullString `json:"deskripsi"`
	LinkLowongan        sql.NullString `json:"link_lowongan"`
	CreatedBy           string         `json:"created_by"`
}

func (q *Queries) CreateLowonganPekerjaan(ctx context.Context, arg CreateLowonganPekerjaanParams) (LowonganPekerjaan, error) {
	row := q.db.QueryRowContext(ctx, createLowonganPekerjaan,
		arg.IDLowonganPekerjaan,
		arg.Posisi,
		arg.TglBukaLowongan,
		arg.TglTutupLowongan,
		arg.Kriteria,
		arg.Deskripsi,
		arg.LinkLowongan,
		arg.CreatedBy,
	)
	var i LowonganPekerjaan
	err := row.Scan(
		&i.ID,
		&i.IDLowonganPekerjaan,
		&i.Posisi,
		&i.TglBukaLowongan,
		&i.TglTutupLowongan,
		&i.Kriteria,
		&i.Deskripsi,
		&i.LinkLowongan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getLastLowonganPekerjaanID = `-- name: GetLastLowonganPekerjaanID :one
SELECT id_lowongan_pekerjaan
FROM lowongan_pekerjaan
ORDER BY id_lowongan_pekerjaan DESC
    LIMIT 1
`

func (q *Queries) GetLastLowonganPekerjaanID(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getLastLowonganPekerjaanID)
	var id_lowongan_pekerjaan string
	err := row.Scan(&id_lowongan_pekerjaan)
	return id_lowongan_pekerjaan, err
}

const getLowonganPekerjaanByID = `-- name: GetLowonganPekerjaanByID :one
SELECT id, id_lowongan_pekerjaan, posisi, tgl_buka_lowongan, tgl_tutup_lowongan, kriteria, deskripsi, link_lowongan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM lowongan_pekerjaan
WHERE id_lowongan_pekerjaan = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetLowonganPekerjaanByID(ctx context.Context, idLowonganPekerjaan string) (LowonganPekerjaan, error) {
	row := q.db.QueryRowContext(ctx, getLowonganPekerjaanByID, idLowonganPekerjaan)
	var i LowonganPekerjaan
	err := row.Scan(
		&i.ID,
		&i.IDLowonganPekerjaan,
		&i.Posisi,
		&i.TglBukaLowongan,
		&i.TglTutupLowongan,
		&i.Kriteria,
		&i.Deskripsi,
		&i.LinkLowongan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listLowonganPekerjaan = `-- name: ListLowonganPekerjaan :many
SELECT id, id_lowongan_pekerjaan, posisi, tgl_buka_lowongan, tgl_tutup_lowongan, kriteria, deskripsi, link_lowongan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM lowongan_pekerjaan
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListLowonganPekerjaan(ctx context.Context) ([]LowonganPekerjaan, error) {
	rows, err := q.db.QueryContext(ctx, listLowonganPekerjaan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LowonganPekerjaan
	for rows.Next() {
		var i LowonganPekerjaan
		if err := rows.Scan(
			&i.ID,
			&i.IDLowonganPekerjaan,
			&i.Posisi,
			&i.TglBukaLowongan,
			&i.TglTutupLowongan,
			&i.Kriteria,
			&i.Deskripsi,
			&i.LinkLowongan,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreLowonganPekerjaan = `-- name: RestoreLowonganPekerjaan :exec
UPDATE lowongan_pekerjaan
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_lowongan_pekerjaan = $1
`

func (q *Queries) RestoreLowonganPekerjaan(ctx context.Context, idLowonganPekerjaan string) error {
	_, err := q.db.ExecContext(ctx, restoreLowonganPekerjaan, idLowonganPekerjaan)
	return err
}

const softDeleteLowonganPekerjaan = `-- name: SoftDeleteLowonganPekerjaan :exec
UPDATE lowongan_pekerjaan
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_lowongan_pekerjaan = $2
  AND deleted_at IS NULL
`

type SoftDeleteLowonganPekerjaanParams struct {
	DeletedBy           sql.NullString `json:"deleted_by"`
	IDLowonganPekerjaan string         `json:"id_lowongan_pekerjaan"`
}

func (q *Queries) SoftDeleteLowonganPekerjaan(ctx context.Context, arg SoftDeleteLowonganPekerjaanParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteLowonganPekerjaan, arg.DeletedBy, arg.IDLowonganPekerjaan)
	return err
}

const updateLowonganPekerjaan = `-- name: UpdateLowonganPekerjaan :one
UPDATE lowongan_pekerjaan
SET
    posisi = $1,
    tgl_buka_lowongan = $2,
    tgl_tutup_lowongan = $3,
    kriteria = $4,
    deskripsi = $5,
    link_lowongan = $6,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $7
WHERE id_lowongan_pekerjaan = $8
  AND deleted_at IS NULL
    RETURNING id, id_lowongan_pekerjaan, posisi, tgl_buka_lowongan, tgl_tutup_lowongan, kriteria, deskripsi, link_lowongan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateLowonganPekerjaanParams struct {
	Posisi              string         `json:"posisi"`
	TglBukaLowongan     time.Time      `json:"tgl_buka_lowongan"`
	TglTutupLowongan    time.Time      `json:"tgl_tutup_lowongan"`
	Kriteria            sql.NullString `json:"kriteria"`
	Deskripsi           sql.NullString `json:"deskripsi"`
	LinkLowongan        sql.NullString `json:"link_lowongan"`
	UpdatedBy           sql.NullString `json:"updated_by"`
	IDLowonganPekerjaan string         `json:"id_lowongan_pekerjaan"`
}

func (q *Queries) UpdateLowonganPekerjaan(ctx context.Context, arg UpdateLowonganPekerjaanParams) (LowonganPekerjaan, error) {
	row := q.db.QueryRowContext(ctx, updateLowonganPekerjaan,
		arg.Posisi,
		arg.TglBukaLowongan,
		arg.TglTutupLowongan,
		arg.Kriteria,
		arg.Deskripsi,
		arg.LinkLowongan,
		arg.UpdatedBy,
		arg.IDLowonganPekerjaan,
	)
	var i LowonganPekerjaan
	err := row.Scan(
		&i.ID,
		&i.IDLowonganPekerjaan,
		&i.Posisi,
		&i.TglBukaLowongan,
		&i.TglTutupLowongan,
		&i.Kriteria,
		&i.Deskripsi,
		&i.LinkLowongan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
