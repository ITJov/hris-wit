// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: inventaris.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createInventaris = `-- name: CreateInventaris :one
INSERT INTO inventaris (
    inventaris_id,
    brand_id,
    ruangan_id,
    user_id,
    kategori_id,
    vendor_id,
    nama_inventaris,
    jumlah,
    tanggal_beli,
    harga,
    keterangan,
    old_inventory_code,
    image_url,
    status,
    created_at,
    created_by
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14::status_enum,
    (now() at time zone 'UTC')::TIMESTAMP,
    $15
)
RETURNING id, inventaris_id, brand_id, ruangan_id, user_id, kategori_id, vendor_id, nama_inventaris, jumlah, tanggal_beli, harga, keterangan, old_inventory_code, image_url, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateInventarisParams struct {
	InventarisID     string         `json:"inventaris_id"`
	BrandID          string         `json:"brand_id"`
	RuanganID        sql.NullString `json:"ruangan_id"`
	UserID           sql.NullString `json:"user_id"`
	KategoriID       string         `json:"kategori_id"`
	VendorID         string         `json:"vendor_id"`
	NamaInventaris   string         `json:"nama_inventaris"`
	Jumlah           int32          `json:"jumlah"`
	TanggalBeli      time.Time      `json:"tanggal_beli"`
	Harga            int64          `json:"harga"`
	Keterangan       sql.NullString `json:"keterangan"`
	OldInventoryCode sql.NullString `json:"old_inventory_code"`
	ImageUrl         sql.NullString `json:"image_url"`
	Status           interface{}    `json:"status"`
	CreatedBy        string         `json:"created_by"`
}

func (q *Queries) CreateInventaris(ctx context.Context, arg CreateInventarisParams) (Inventari, error) {
	row := q.db.QueryRowContext(ctx, createInventaris,
		arg.InventarisID,
		arg.BrandID,
		arg.RuanganID,
		arg.UserID,
		arg.KategoriID,
		arg.VendorID,
		arg.NamaInventaris,
		arg.Jumlah,
		arg.TanggalBeli,
		arg.Harga,
		arg.Keterangan,
		arg.OldInventoryCode,
		arg.ImageUrl,
		arg.Status,
		arg.CreatedBy,
	)
	var i Inventari
	err := row.Scan(
		&i.ID,
		&i.InventarisID,
		&i.BrandID,
		&i.RuanganID,
		&i.UserID,
		&i.KategoriID,
		&i.VendorID,
		&i.NamaInventaris,
		&i.Jumlah,
		&i.TanggalBeli,
		&i.Harga,
		&i.Keterangan,
		&i.OldInventoryCode,
		&i.ImageUrl,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getInventarisByID = `-- name: GetInventarisByID :one
SELECT id, inventaris_id, brand_id, ruangan_id, user_id, kategori_id, vendor_id, nama_inventaris, jumlah, tanggal_beli, harga, keterangan, old_inventory_code, image_url, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM inventaris
WHERE inventaris_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetInventarisByID(ctx context.Context, inventarisID string) (Inventari, error) {
	row := q.db.QueryRowContext(ctx, getInventarisByID, inventarisID)
	var i Inventari
	err := row.Scan(
		&i.ID,
		&i.InventarisID,
		&i.BrandID,
		&i.RuanganID,
		&i.UserID,
		&i.KategoriID,
		&i.VendorID,
		&i.NamaInventaris,
		&i.Jumlah,
		&i.TanggalBeli,
		&i.Harga,
		&i.Keterangan,
		&i.OldInventoryCode,
		&i.ImageUrl,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getInventarisWithRelationsByID = `-- name: GetInventarisWithRelationsByID :one
SELECT
    i.inventaris_id,
    i.nama_inventaris,
    i.tanggal_beli,
    i.harga,
    i.image_url,
    i.jumlah,
    i.keterangan,
    i.old_inventory_code,
    i.status,

    i.vendor_id,
    v.nama_vendor,

    i.brand_id,
    b.nama_brand,

    i.kategori_id,
    k.nama_kategori,

    i.ruangan_id,
    r.nama_ruangan

FROM inventaris i
         LEFT JOIN vendor v ON v.vendor_id = i.vendor_id
         LEFT JOIN brand b ON b.brand_id = i.brand_id
         LEFT JOIN kategori k ON k.kategori_id = i.kategori_id
         LEFT JOIN ruangan r ON r.ruangan_id = i.ruangan_id

WHERE i.inventaris_id = $1
  AND i.deleted_at IS NULL
`

type GetInventarisWithRelationsByIDRow struct {
	InventarisID     string         `json:"inventaris_id"`
	NamaInventaris   string         `json:"nama_inventaris"`
	TanggalBeli      time.Time      `json:"tanggal_beli"`
	Harga            int64          `json:"harga"`
	ImageUrl         sql.NullString `json:"image_url"`
	Jumlah           int32          `json:"jumlah"`
	Keterangan       sql.NullString `json:"keterangan"`
	OldInventoryCode sql.NullString `json:"old_inventory_code"`
	Status           interface{}    `json:"status"`
	VendorID         string         `json:"vendor_id"`
	NamaVendor       sql.NullString `json:"nama_vendor"`
	BrandID          string         `json:"brand_id"`
	NamaBrand        sql.NullString `json:"nama_brand"`
	KategoriID       string         `json:"kategori_id"`
	NamaKategori     sql.NullString `json:"nama_kategori"`
	RuanganID        sql.NullString `json:"ruangan_id"`
	NamaRuangan      sql.NullString `json:"nama_ruangan"`
}

func (q *Queries) GetInventarisWithRelationsByID(ctx context.Context, inventarisID string) (GetInventarisWithRelationsByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getInventarisWithRelationsByID, inventarisID)
	var i GetInventarisWithRelationsByIDRow
	err := row.Scan(
		&i.InventarisID,
		&i.NamaInventaris,
		&i.TanggalBeli,
		&i.Harga,
		&i.ImageUrl,
		&i.Jumlah,
		&i.Keterangan,
		&i.OldInventoryCode,
		&i.Status,
		&i.VendorID,
		&i.NamaVendor,
		&i.BrandID,
		&i.NamaBrand,
		&i.KategoriID,
		&i.NamaKategori,
		&i.RuanganID,
		&i.NamaRuangan,
	)
	return i, err
}

const listInventaris = `-- name: ListInventaris :many
SELECT id, inventaris_id, brand_id, ruangan_id, user_id, kategori_id, vendor_id, nama_inventaris, jumlah, tanggal_beli, harga, keterangan, old_inventory_code, image_url, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM inventaris
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListInventaris(ctx context.Context) ([]Inventari, error) {
	rows, err := q.db.QueryContext(ctx, listInventaris)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventari
	for rows.Next() {
		var i Inventari
		if err := rows.Scan(
			&i.ID,
			&i.InventarisID,
			&i.BrandID,
			&i.RuanganID,
			&i.UserID,
			&i.KategoriID,
			&i.VendorID,
			&i.NamaInventaris,
			&i.Jumlah,
			&i.TanggalBeli,
			&i.Harga,
			&i.Keterangan,
			&i.OldInventoryCode,
			&i.ImageUrl,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInventarisWithRelations = `-- name: ListInventarisWithRelations :many
SELECT
    i.inventaris_id,
    i.nama_inventaris,
    i.tanggal_beli,
    i.harga,
    i.image_url,
    i.jumlah,
    i.keterangan,
    i.old_inventory_code,
    i.status,

    -- relasi vendor
    v.vendor_id,
    v.nama_vendor,

    -- relasi brand
    b.brand_id,
    b.nama_brand,

    -- relasi kategori
    k.kategori_id,
    k.nama_kategori,

    -- relasi ruangan
    r.ruangan_id,
    r.nama_ruangan

FROM inventaris i
         LEFT JOIN vendor v ON i.vendor_id = v.vendor_id
         LEFT JOIN brand b ON i.brand_id = b.brand_id
         LEFT JOIN kategori k ON i.kategori_id = k.kategori_id
         LEFT JOIN ruangan r ON i.ruangan_id = r.ruangan_id
WHERE i.deleted_at IS NULL
ORDER BY i.created_at DESC
`

type ListInventarisWithRelationsRow struct {
	InventarisID     string         `json:"inventaris_id"`
	NamaInventaris   string         `json:"nama_inventaris"`
	TanggalBeli      time.Time      `json:"tanggal_beli"`
	Harga            int64          `json:"harga"`
	ImageUrl         sql.NullString `json:"image_url"`
	Jumlah           int32          `json:"jumlah"`
	Keterangan       sql.NullString `json:"keterangan"`
	OldInventoryCode sql.NullString `json:"old_inventory_code"`
	Status           interface{}    `json:"status"`
	VendorID         sql.NullString `json:"vendor_id"`
	NamaVendor       sql.NullString `json:"nama_vendor"`
	BrandID          sql.NullString `json:"brand_id"`
	NamaBrand        sql.NullString `json:"nama_brand"`
	KategoriID       sql.NullString `json:"kategori_id"`
	NamaKategori     sql.NullString `json:"nama_kategori"`
	RuanganID        sql.NullString `json:"ruangan_id"`
	NamaRuangan      sql.NullString `json:"nama_ruangan"`
}

func (q *Queries) ListInventarisWithRelations(ctx context.Context) ([]ListInventarisWithRelationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listInventarisWithRelations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListInventarisWithRelationsRow
	for rows.Next() {
		var i ListInventarisWithRelationsRow
		if err := rows.Scan(
			&i.InventarisID,
			&i.NamaInventaris,
			&i.TanggalBeli,
			&i.Harga,
			&i.ImageUrl,
			&i.Jumlah,
			&i.Keterangan,
			&i.OldInventoryCode,
			&i.Status,
			&i.VendorID,
			&i.NamaVendor,
			&i.BrandID,
			&i.NamaBrand,
			&i.KategoriID,
			&i.NamaKategori,
			&i.RuanganID,
			&i.NamaRuangan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreInventaris = `-- name: RestoreInventaris :exec
UPDATE inventaris
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE inventaris_id = $1
`

func (q *Queries) RestoreInventaris(ctx context.Context, inventarisID string) error {
	_, err := q.db.ExecContext(ctx, restoreInventaris, inventarisID)
	return err
}

const softDeleteInventaris = `-- name: SoftDeleteInventaris :exec
UPDATE inventaris
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE inventaris_id = $2
`

type SoftDeleteInventarisParams struct {
	DeletedBy    sql.NullString `json:"deleted_by"`
	InventarisID string         `json:"inventaris_id"`
}

func (q *Queries) SoftDeleteInventaris(ctx context.Context, arg SoftDeleteInventarisParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteInventaris, arg.DeletedBy, arg.InventarisID)
	return err
}

const updateInventaris = `-- name: UpdateInventaris :one
UPDATE inventaris
SET
    brand_id = $1,
    ruangan_id = $2,
    user_id = $3,
    kategori_id = $4,
    vendor_id = $5,
    nama_inventaris = $6,
    jumlah = $7,
    tanggal_beli = $8,
    harga = $9,
    keterangan = $10,
    old_inventory_code = $11,
    image_url = $12,
    status = $13::status_enum,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $14
WHERE inventaris_id = $15 AND deleted_at IS NULL
RETURNING id, inventaris_id, brand_id, ruangan_id, user_id, kategori_id, vendor_id, nama_inventaris, jumlah, tanggal_beli, harga, keterangan, old_inventory_code, image_url, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateInventarisParams struct {
	BrandID          string         `json:"brand_id"`
	RuanganID        sql.NullString `json:"ruangan_id"`
	UserID           sql.NullString `json:"user_id"`
	KategoriID       string         `json:"kategori_id"`
	VendorID         string         `json:"vendor_id"`
	NamaInventaris   string         `json:"nama_inventaris"`
	Jumlah           int32          `json:"jumlah"`
	TanggalBeli      time.Time      `json:"tanggal_beli"`
	Harga            int64          `json:"harga"`
	Keterangan       sql.NullString `json:"keterangan"`
	OldInventoryCode sql.NullString `json:"old_inventory_code"`
	ImageUrl         sql.NullString `json:"image_url"`
	Status           interface{}    `json:"status"`
	UpdatedBy        sql.NullString `json:"updated_by"`
	InventarisID     string         `json:"inventaris_id"`
}

func (q *Queries) UpdateInventaris(ctx context.Context, arg UpdateInventarisParams) (Inventari, error) {
	row := q.db.QueryRowContext(ctx, updateInventaris,
		arg.BrandID,
		arg.RuanganID,
		arg.UserID,
		arg.KategoriID,
		arg.VendorID,
		arg.NamaInventaris,
		arg.Jumlah,
		arg.TanggalBeli,
		arg.Harga,
		arg.Keterangan,
		arg.OldInventoryCode,
		arg.ImageUrl,
		arg.Status,
		arg.UpdatedBy,
		arg.InventarisID,
	)
	var i Inventari
	err := row.Scan(
		&i.ID,
		&i.InventarisID,
		&i.BrandID,
		&i.RuanganID,
		&i.UserID,
		&i.KategoriID,
		&i.VendorID,
		&i.NamaInventaris,
		&i.Jumlah,
		&i.TanggalBeli,
		&i.Harga,
		&i.Keterangan,
		&i.OldInventoryCode,
		&i.ImageUrl,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
