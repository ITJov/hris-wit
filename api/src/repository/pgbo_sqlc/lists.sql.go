// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lists.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (
    project_id, list_name, list_order,
    created_at, created_by
) VALUES (
     $1, $2, $3,
    (now() at time zone 'UTC')::TIMESTAMP, $4
) RETURNING list_id
`

type CreateListParams struct {
	ProjectID string         `json:"project_id"`
	ListName  sql.NullString `json:"list_name"`
	ListOrder sql.NullInt64  `json:"list_order"`
	CreatedBy string         `json:"created_by"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createList,
		arg.ProjectID,
		arg.ListName,
		arg.ListOrder,
		arg.CreatedBy,
	)
	var list_id string
	err := row.Scan(&list_id)
	return list_id, err
}

const getListByID = `-- name: GetListByID :one
SELECT id, list_id, project_id, list_name, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, list_order FROM lists
WHERE list_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetListByID(ctx context.Context, listID string) (List, error) {
	row := q.db.QueryRowContext(ctx, getListByID, listID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.ProjectID,
		&i.ListName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.ListOrder,
	)
	return i, err
}

const getListByProjectIDAndListID = `-- name: GetListByProjectIDAndListID :one
SELECT id, list_id, project_id, list_name, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, list_order FROM lists
WHERE list_id = $1
AND project_id = $2
AND deleted_at IS NULL
`

type GetListByProjectIDAndListIDParams struct {
	ListID    string `json:"list_id"`
	ProjectID string `json:"project_id"`
}

func (q *Queries) GetListByProjectIDAndListID(ctx context.Context, arg GetListByProjectIDAndListIDParams) (List, error) {
	row := q.db.QueryRowContext(ctx, getListByProjectIDAndListID, arg.ListID, arg.ProjectID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.ProjectID,
		&i.ListName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.ListOrder,
	)
	return i, err
}

const listLists = `-- name: ListLists :many
SELECT id, list_id, project_id, list_name, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, list_order FROM lists
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListLists(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, listLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.ProjectID,
			&i.ListName,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.ListOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listListsByProjectID = `-- name: ListListsByProjectID :many
SELECT id, list_id, project_id, list_name, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, list_order FROM lists
where project_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) ListListsByProjectID(ctx context.Context, projectID string) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, listListsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.ProjectID,
			&i.ListName,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.ListOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreList = `-- name: RestoreList :exec
UPDATE lists
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE list_id = $1
`

func (q *Queries) RestoreList(ctx context.Context, listID string) error {
	_, err := q.db.ExecContext(ctx, restoreList, listID)
	return err
}

const softDeleteList = `-- name: SoftDeleteList :exec
UPDATE lists
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE list_id = $2
`

type SoftDeleteListParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	ListID    string         `json:"list_id"`
}

func (q *Queries) SoftDeleteList(ctx context.Context, arg SoftDeleteListParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteList, arg.DeletedBy, arg.ListID)
	return err
}

const updateList = `-- name: UpdateList :one
UPDATE lists
SET
    list_order = $1,
    list_name = $2,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $3
WHERE list_id = $4
  AND deleted_at IS NULL
RETURNING id, list_id, project_id, list_name, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, list_order
`

type UpdateListParams struct {
	ListOrder sql.NullInt64  `json:"list_order"`
	ListName  sql.NullString `json:"list_name"`
	UpdatedBy sql.NullString `json:"updated_by"`
	ListID    string         `json:"list_id"`
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList,
		arg.ListOrder,
		arg.ListName,
		arg.UpdatedBy,
		arg.ListID,
	)
	var i List
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.ProjectID,
		&i.ListName,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.ListOrder,
	)
	return i, err
}
