// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ruangan.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createRuangan = `-- name: CreateRuangan :one
INSERT INTO ruangan (
    ruangan_id,
    kantor_id,
    nama_ruangan,
    lantai,
    status,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5::status_enum,
             (now() at time zone 'UTC')::TIMESTAMP,
             $6
         )
    RETURNING id, ruangan_id, kantor_id, nama_ruangan, lantai, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateRuanganParams struct {
	RuanganID   string        `json:"ruangan_id"`
	KantorID    string        `json:"kantor_id"`
	NamaRuangan string        `json:"nama_ruangan"`
	Lantai      sql.NullInt32 `json:"lantai"`
	Status      interface{}   `json:"status"`
	CreatedBy   string        `json:"created_by"`
}

func (q *Queries) CreateRuangan(ctx context.Context, arg CreateRuanganParams) (Ruangan, error) {
	row := q.db.QueryRowContext(ctx, createRuangan,
		arg.RuanganID,
		arg.KantorID,
		arg.NamaRuangan,
		arg.Lantai,
		arg.Status,
		arg.CreatedBy,
	)
	var i Ruangan
	err := row.Scan(
		&i.ID,
		&i.RuanganID,
		&i.KantorID,
		&i.NamaRuangan,
		&i.Lantai,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getRuanganByID = `-- name: GetRuanganByID :one
SELECT id, ruangan_id, kantor_id, nama_ruangan, lantai, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM ruangan
WHERE ruangan_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetRuanganByID(ctx context.Context, ruanganID string) (Ruangan, error) {
	row := q.db.QueryRowContext(ctx, getRuanganByID, ruanganID)
	var i Ruangan
	err := row.Scan(
		&i.ID,
		&i.RuanganID,
		&i.KantorID,
		&i.NamaRuangan,
		&i.Lantai,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listRuangan = `-- name: ListRuangan :many
SELECT id, ruangan_id, kantor_id, nama_ruangan, lantai, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM ruangan
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListRuangan(ctx context.Context) ([]Ruangan, error) {
	rows, err := q.db.QueryContext(ctx, listRuangan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ruangan
	for rows.Next() {
		var i Ruangan
		if err := rows.Scan(
			&i.ID,
			&i.RuanganID,
			&i.KantorID,
			&i.NamaRuangan,
			&i.Lantai,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreRuangan = `-- name: RestoreRuangan :exec
UPDATE ruangan
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE ruangan_id = $1
`

func (q *Queries) RestoreRuangan(ctx context.Context, ruanganID string) error {
	_, err := q.db.ExecContext(ctx, restoreRuangan, ruanganID)
	return err
}

const softDeleteRuangan = `-- name: SoftDeleteRuangan :exec
UPDATE ruangan
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE ruangan_id = $2
`

type SoftDeleteRuanganParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	RuanganID string         `json:"ruangan_id"`
}

func (q *Queries) SoftDeleteRuangan(ctx context.Context, arg SoftDeleteRuanganParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteRuangan, arg.DeletedBy, arg.RuanganID)
	return err
}

const updateRuangan = `-- name: UpdateRuangan :one
UPDATE ruangan
SET
    kantor_id = $1,
    nama_ruangan = $2,
    lantai = $3,
    status = $4::status_enum,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $5
WHERE ruangan_id = $6
  AND deleted_at IS NULL
    RETURNING id, ruangan_id, kantor_id, nama_ruangan, lantai, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateRuanganParams struct {
	KantorID    string         `json:"kantor_id"`
	NamaRuangan string         `json:"nama_ruangan"`
	Lantai      sql.NullInt32  `json:"lantai"`
	Status      interface{}    `json:"status"`
	UpdatedBy   sql.NullString `json:"updated_by"`
	RuanganID   string         `json:"ruangan_id"`
}

func (q *Queries) UpdateRuangan(ctx context.Context, arg UpdateRuanganParams) (Ruangan, error) {
	row := q.db.QueryRowContext(ctx, updateRuangan,
		arg.KantorID,
		arg.NamaRuangan,
		arg.Lantai,
		arg.Status,
		arg.UpdatedBy,
		arg.RuanganID,
	)
	var i Ruangan
	err := row.Scan(
		&i.ID,
		&i.RuanganID,
		&i.KantorID,
		&i.NamaRuangan,
		&i.Lantai,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
