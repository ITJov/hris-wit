// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: kantor.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createKantor = `-- name: CreateKantor :one
INSERT INTO kantor (
    kantor_id,
    nama_kantor,
    kota,
    alamat,
    nomor_telp,
    status,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6::status_enum,
             (now() at time zone 'UTC')::TIMESTAMP,
             $7
         )
    RETURNING id, kantor_id, nama_kantor, kota, alamat, nomor_telp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateKantorParams struct {
	KantorID   string      `json:"kantor_id"`
	NamaKantor string      `json:"nama_kantor"`
	Kota       string      `json:"kota"`
	Alamat     string      `json:"alamat"`
	NomorTelp  string      `json:"nomor_telp"`
	Status     interface{} `json:"status"`
	CreatedBy  string      `json:"created_by"`
}

func (q *Queries) CreateKantor(ctx context.Context, arg CreateKantorParams) (Kantor, error) {
	row := q.db.QueryRowContext(ctx, createKantor,
		arg.KantorID,
		arg.NamaKantor,
		arg.Kota,
		arg.Alamat,
		arg.NomorTelp,
		arg.Status,
		arg.CreatedBy,
	)
	var i Kantor
	err := row.Scan(
		&i.ID,
		&i.KantorID,
		&i.NamaKantor,
		&i.Kota,
		&i.Alamat,
		&i.NomorTelp,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getKantorByID = `-- name: GetKantorByID :one
SELECT id, kantor_id, nama_kantor, kota, alamat, nomor_telp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM kantor
WHERE kantor_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetKantorByID(ctx context.Context, kantorID string) (Kantor, error) {
	row := q.db.QueryRowContext(ctx, getKantorByID, kantorID)
	var i Kantor
	err := row.Scan(
		&i.ID,
		&i.KantorID,
		&i.NamaKantor,
		&i.Kota,
		&i.Alamat,
		&i.NomorTelp,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listKantor = `-- name: ListKantor :many
SELECT id, kantor_id, nama_kantor, kota, alamat, nomor_telp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM kantor
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListKantor(ctx context.Context) ([]Kantor, error) {
	rows, err := q.db.QueryContext(ctx, listKantor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kantor
	for rows.Next() {
		var i Kantor
		if err := rows.Scan(
			&i.ID,
			&i.KantorID,
			&i.NamaKantor,
			&i.Kota,
			&i.Alamat,
			&i.NomorTelp,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreKantor = `-- name: RestoreKantor :exec
UPDATE kantor
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE kantor_id = $1
`

func (q *Queries) RestoreKantor(ctx context.Context, kantorID string) error {
	_, err := q.db.ExecContext(ctx, restoreKantor, kantorID)
	return err
}

const softDeleteKantor = `-- name: SoftDeleteKantor :exec
UPDATE kantor
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE kantor_id = $2
`

type SoftDeleteKantorParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	KantorID  string         `json:"kantor_id"`
}

func (q *Queries) SoftDeleteKantor(ctx context.Context, arg SoftDeleteKantorParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteKantor, arg.DeletedBy, arg.KantorID)
	return err
}

const updateKantor = `-- name: UpdateKantor :one
UPDATE kantor
SET
    nama_kantor = $1,
    kota = $2,
    alamat = $3,
    nomor_telp = $4,
    status = $5::status_enum,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $6
WHERE kantor_id = $7
  AND deleted_at IS NULL
    RETURNING id, kantor_id, nama_kantor, kota, alamat, nomor_telp, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateKantorParams struct {
	NamaKantor string         `json:"nama_kantor"`
	Kota       string         `json:"kota"`
	Alamat     string         `json:"alamat"`
	NomorTelp  string         `json:"nomor_telp"`
	Status     interface{}    `json:"status"`
	UpdatedBy  sql.NullString `json:"updated_by"`
	KantorID   string         `json:"kantor_id"`
}

func (q *Queries) UpdateKantor(ctx context.Context, arg UpdateKantorParams) (Kantor, error) {
	row := q.db.QueryRowContext(ctx, updateKantor,
		arg.NamaKantor,
		arg.Kota,
		arg.Alamat,
		arg.NomorTelp,
		arg.Status,
		arg.UpdatedBy,
		arg.KantorID,
	)
	var i Kantor
	err := row.Scan(
		&i.ID,
		&i.KantorID,
		&i.NamaKantor,
		&i.Kota,
		&i.Alamat,
		&i.NomorTelp,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
