// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: kontak_vendor.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createKontakVendor = `-- name: CreateKontakVendor :one
INSERT INTO kontak_vendor (
    kontak_vendor_id,
    vendor_id,
    jenis_kontak,
    isi_kontak,
    is_primary,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3::contact_type_enum,
             $4,
             $5,
             (now() at time zone 'UTC')::TIMESTAMP,
             $6
         )
    RETURNING id, kontak_vendor_id, vendor_id, jenis_kontak, isi_kontak, is_primary, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateKontakVendorParams struct {
	KontakVendorID string         `json:"kontak_vendor_id"`
	VendorID       string         `json:"vendor_id"`
	JenisKontak    interface{}    `json:"jenis_kontak"`
	IsiKontak      sql.NullString `json:"isi_kontak"`
	IsPrimary      sql.NullBool   `json:"is_primary"`
	CreatedBy      string         `json:"created_by"`
}

func (q *Queries) CreateKontakVendor(ctx context.Context, arg CreateKontakVendorParams) (KontakVendor, error) {
	row := q.db.QueryRowContext(ctx, createKontakVendor,
		arg.KontakVendorID,
		arg.VendorID,
		arg.JenisKontak,
		arg.IsiKontak,
		arg.IsPrimary,
		arg.CreatedBy,
	)
	var i KontakVendor
	err := row.Scan(
		&i.ID,
		&i.KontakVendorID,
		&i.VendorID,
		&i.JenisKontak,
		&i.IsiKontak,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getKontakVendorByID = `-- name: GetKontakVendorByID :one
SELECT id, kontak_vendor_id, vendor_id, jenis_kontak, isi_kontak, is_primary, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM kontak_vendor
WHERE kontak_vendor_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetKontakVendorByID(ctx context.Context, kontakVendorID string) (KontakVendor, error) {
	row := q.db.QueryRowContext(ctx, getKontakVendorByID, kontakVendorID)
	var i KontakVendor
	err := row.Scan(
		&i.ID,
		&i.KontakVendorID,
		&i.VendorID,
		&i.JenisKontak,
		&i.IsiKontak,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listKontakVendorByVendorID = `-- name: ListKontakVendorByVendorID :many
SELECT id, kontak_vendor_id, vendor_id, jenis_kontak, isi_kontak, is_primary, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM kontak_vendor
WHERE vendor_id = $1
  AND deleted_at IS NULL
ORDER BY is_primary DESC, created_at DESC
`

func (q *Queries) ListKontakVendorByVendorID(ctx context.Context, vendorID string) ([]KontakVendor, error) {
	rows, err := q.db.QueryContext(ctx, listKontakVendorByVendorID, vendorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KontakVendor
	for rows.Next() {
		var i KontakVendor
		if err := rows.Scan(
			&i.ID,
			&i.KontakVendorID,
			&i.VendorID,
			&i.JenisKontak,
			&i.IsiKontak,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreKontakVendor = `-- name: RestoreKontakVendor :exec
UPDATE kontak_vendor
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE kontak_vendor_id = $1
`

func (q *Queries) RestoreKontakVendor(ctx context.Context, kontakVendorID string) error {
	_, err := q.db.ExecContext(ctx, restoreKontakVendor, kontakVendorID)
	return err
}

const softDeleteKontakVendor = `-- name: SoftDeleteKontakVendor :exec
UPDATE kontak_vendor
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE kontak_vendor_id = $2
`

type SoftDeleteKontakVendorParams struct {
	DeletedBy      sql.NullString `json:"deleted_by"`
	KontakVendorID string         `json:"kontak_vendor_id"`
}

func (q *Queries) SoftDeleteKontakVendor(ctx context.Context, arg SoftDeleteKontakVendorParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteKontakVendor, arg.DeletedBy, arg.KontakVendorID)
	return err
}

const softDeleteKontakVendorByVendorID = `-- name: SoftDeleteKontakVendorByVendorID :exec
UPDATE kontak_vendor
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE vendor_id = $2
  AND deleted_at IS NULL
`

type SoftDeleteKontakVendorByVendorIDParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	VendorID  string         `json:"vendor_id"`
}

func (q *Queries) SoftDeleteKontakVendorByVendorID(ctx context.Context, arg SoftDeleteKontakVendorByVendorIDParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteKontakVendorByVendorID, arg.DeletedBy, arg.VendorID)
	return err
}

const updateKontakVendor = `-- name: UpdateKontakVendor :one
UPDATE kontak_vendor
SET
    jenis_kontak = $1::contact_type_enum,
    isi_kontak = $2,
    is_primary = $3,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $4
WHERE kontak_vendor_id = $5
  AND deleted_at IS NULL
    RETURNING id, kontak_vendor_id, vendor_id, jenis_kontak, isi_kontak, is_primary, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateKontakVendorParams struct {
	JenisKontak    interface{}    `json:"jenis_kontak"`
	IsiKontak      sql.NullString `json:"isi_kontak"`
	IsPrimary      sql.NullBool   `json:"is_primary"`
	UpdatedBy      sql.NullString `json:"updated_by"`
	KontakVendorID string         `json:"kontak_vendor_id"`
}

func (q *Queries) UpdateKontakVendor(ctx context.Context, arg UpdateKontakVendorParams) (KontakVendor, error) {
	row := q.db.QueryRowContext(ctx, updateKontakVendor,
		arg.JenisKontak,
		arg.IsiKontak,
		arg.IsPrimary,
		arg.UpdatedBy,
		arg.KontakVendorID,
	)
	var i KontakVendor
	err := row.Scan(
		&i.ID,
		&i.KontakVendorID,
		&i.VendorID,
		&i.JenisKontak,
		&i.IsiKontak,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
