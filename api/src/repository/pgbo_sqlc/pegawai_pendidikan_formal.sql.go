// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pegawai_pendidikan_formal.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPegawaiPendidikanFormal = `-- name: CreatePegawaiPendidikanFormal :one
INSERT INTO pegawai_pendidikan_formal (
    id_pddk_formal, id_pegawai, jenjang_pddk, nama_sekolah, jurusan_fakultas,
    kota, tgl_lulus, ipk, created_at, created_by
) VALUES (
             $1, $2, $3, $4, $5,
             $6, $7, $8,
             (now() at time zone 'UTC')::TIMESTAMP, $9
         ) RETURNING id, id_pddk_formal, id_pegawai, jenjang_pddk, nama_sekolah, jurusan_fakultas, kota, tgl_lulus, ipk, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePegawaiPendidikanFormalParams struct {
	IDPddkFormal    string          `json:"id_pddk_formal"`
	IDPegawai       string          `json:"id_pegawai"`
	JenjangPddk     string          `json:"jenjang_pddk"`
	NamaSekolah     string          `json:"nama_sekolah"`
	JurusanFakultas sql.NullString  `json:"jurusan_fakultas"`
	Kota            sql.NullString  `json:"kota"`
	TglLulus        sql.NullTime    `json:"tgl_lulus"`
	Ipk             sql.NullFloat64 `json:"ipk"`
	CreatedBy       string          `json:"created_by"`
}

func (q *Queries) CreatePegawaiPendidikanFormal(ctx context.Context, arg CreatePegawaiPendidikanFormalParams) (PegawaiPendidikanFormal, error) {
	row := q.db.QueryRowContext(ctx, createPegawaiPendidikanFormal,
		arg.IDPddkFormal,
		arg.IDPegawai,
		arg.JenjangPddk,
		arg.NamaSekolah,
		arg.JurusanFakultas,
		arg.Kota,
		arg.TglLulus,
		arg.Ipk,
		arg.CreatedBy,
	)
	var i PegawaiPendidikanFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkFormal,
		&i.IDPegawai,
		&i.JenjangPddk,
		&i.NamaSekolah,
		&i.JurusanFakultas,
		&i.Kota,
		&i.TglLulus,
		&i.Ipk,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPegawaiPendidikanFormalByID = `-- name: GetPegawaiPendidikanFormalByID :one
SELECT id, id_pddk_formal, id_pegawai, jenjang_pddk, nama_sekolah, jurusan_fakultas, kota, tgl_lulus, ipk, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_pendidikan_formal
WHERE id_pddk_formal = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPegawaiPendidikanFormalByID(ctx context.Context, idPddkFormal string) (PegawaiPendidikanFormal, error) {
	row := q.db.QueryRowContext(ctx, getPegawaiPendidikanFormalByID, idPddkFormal)
	var i PegawaiPendidikanFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkFormal,
		&i.IDPegawai,
		&i.JenjangPddk,
		&i.NamaSekolah,
		&i.JurusanFakultas,
		&i.Kota,
		&i.TglLulus,
		&i.Ipk,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPegawaiPendidikanFormal = `-- name: ListPegawaiPendidikanFormal :many
SELECT id, id_pddk_formal, id_pegawai, jenjang_pddk, nama_sekolah, jurusan_fakultas, kota, tgl_lulus, ipk, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_pendidikan_formal
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPegawaiPendidikanFormal(ctx context.Context) ([]PegawaiPendidikanFormal, error) {
	rows, err := q.db.QueryContext(ctx, listPegawaiPendidikanFormal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PegawaiPendidikanFormal
	for rows.Next() {
		var i PegawaiPendidikanFormal
		if err := rows.Scan(
			&i.ID,
			&i.IDPddkFormal,
			&i.IDPegawai,
			&i.JenjangPddk,
			&i.NamaSekolah,
			&i.JurusanFakultas,
			&i.Kota,
			&i.TglLulus,
			&i.Ipk,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePegawaiPendidikanFormal = `-- name: RestorePegawaiPendidikanFormal :exec
UPDATE pegawai_pendidikan_formal
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_pddk_formal = $1
`

func (q *Queries) RestorePegawaiPendidikanFormal(ctx context.Context, idPddkFormal string) error {
	_, err := q.db.ExecContext(ctx, restorePegawaiPendidikanFormal, idPddkFormal)
	return err
}

const softDeletePegawaiPendidikanFormal = `-- name: SoftDeletePegawaiPendidikanFormal :exec
UPDATE pegawai_pendidikan_formal
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_pddk_formal = $2
  AND deleted_at IS NULL
`

type SoftDeletePegawaiPendidikanFormalParams struct {
	DeletedBy    sql.NullString `json:"deleted_by"`
	IDPddkFormal string         `json:"id_pddk_formal"`
}

func (q *Queries) SoftDeletePegawaiPendidikanFormal(ctx context.Context, arg SoftDeletePegawaiPendidikanFormalParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePegawaiPendidikanFormal, arg.DeletedBy, arg.IDPddkFormal)
	return err
}

const updatePegawaiPendidikanFormal = `-- name: UpdatePegawaiPendidikanFormal :one
UPDATE pegawai_pendidikan_formal
SET
    jenjang_pddk = $1,
    nama_sekolah = $2,
    jurusan_fakultas = $3,
    kota = $4,
    tgl_lulus = $5,
    ipk = $6,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $7
WHERE id_pddk_formal = $8
  AND deleted_at IS NULL
    RETURNING id, id_pddk_formal, id_pegawai, jenjang_pddk, nama_sekolah, jurusan_fakultas, kota, tgl_lulus, ipk, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePegawaiPendidikanFormalParams struct {
	JenjangPddk     string          `json:"jenjang_pddk"`
	NamaSekolah     string          `json:"nama_sekolah"`
	JurusanFakultas sql.NullString  `json:"jurusan_fakultas"`
	Kota            sql.NullString  `json:"kota"`
	TglLulus        sql.NullTime    `json:"tgl_lulus"`
	Ipk             sql.NullFloat64 `json:"ipk"`
	UpdatedBy       sql.NullString  `json:"updated_by"`
	IDPddkFormal    string          `json:"id_pddk_formal"`
}

func (q *Queries) UpdatePegawaiPendidikanFormal(ctx context.Context, arg UpdatePegawaiPendidikanFormalParams) (PegawaiPendidikanFormal, error) {
	row := q.db.QueryRowContext(ctx, updatePegawaiPendidikanFormal,
		arg.JenjangPddk,
		arg.NamaSekolah,
		arg.JurusanFakultas,
		arg.Kota,
		arg.TglLulus,
		arg.Ipk,
		arg.UpdatedBy,
		arg.IDPddkFormal,
	)
	var i PegawaiPendidikanFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkFormal,
		&i.IDPegawai,
		&i.JenjangPddk,
		&i.NamaSekolah,
		&i.JurusanFakultas,
		&i.Kota,
		&i.TglLulus,
		&i.Ipk,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
