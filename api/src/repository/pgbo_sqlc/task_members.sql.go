// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task_members.sql

package sqlc

import (
	"context"
)

const createTaskMember = `-- name: CreateTaskMember :one
INSERT INTO task_members (
    task_memb_id, project_memb_id, task_id
) VALUES (
    $1, $2, $3
) RETURNING id, task_memb_id, project_memb_id, task_id
`

type CreateTaskMemberParams struct {
	TaskMembID    string `json:"task_memb_id"`
	ProjectMembID string `json:"project_memb_id"`
	TaskID        string `json:"task_id"`
}

func (q *Queries) CreateTaskMember(ctx context.Context, arg CreateTaskMemberParams) (TaskMember, error) {
	row := q.db.QueryRowContext(ctx, createTaskMember, arg.TaskMembID, arg.ProjectMembID, arg.TaskID)
	var i TaskMember
	err := row.Scan(
		&i.ID,
		&i.TaskMembID,
		&i.ProjectMembID,
		&i.TaskID,
	)
	return i, err
}

const getTaskMemberByID = `-- name: GetTaskMemberByID :one
SELECT id, task_memb_id, project_memb_id, task_id FROM task_members
WHERE task_memb_id = $1
`

func (q *Queries) GetTaskMemberByID(ctx context.Context, taskMembID string) (TaskMember, error) {
	row := q.db.QueryRowContext(ctx, getTaskMemberByID, taskMembID)
	var i TaskMember
	err := row.Scan(
		&i.ID,
		&i.TaskMembID,
		&i.ProjectMembID,
		&i.TaskID,
	)
	return i, err
}

const listTaskMembers = `-- name: ListTaskMembers :many
SELECT id, task_memb_id, project_memb_id, task_id FROM task_members
`

func (q *Queries) ListTaskMembers(ctx context.Context) ([]TaskMember, error) {
	rows, err := q.db.QueryContext(ctx, listTaskMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskMember
	for rows.Next() {
		var i TaskMember
		if err := rows.Scan(
			&i.ID,
			&i.TaskMembID,
			&i.ProjectMembID,
			&i.TaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
