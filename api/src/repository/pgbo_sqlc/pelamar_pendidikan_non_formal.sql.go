// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pelamar_pendidikan_non_formal.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPelamarPendidikanNonFormal = `-- name: CreatePelamarPendidikanNonFormal :one
INSERT INTO pelamar_pendidikan_non_formal (
    id_pddk_non_formal, id_pelamar, institusi, jenis_pendidikan, kota,
    tgl_lulus, created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, (now() at time zone 'UTC')::TIMESTAMP, $7
) RETURNING id, id_pddk_non_formal, id_pelamar, institusi, jenis_pendidikan, kota, tgl_lulus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePelamarPendidikanNonFormalParams struct {
	IDPddkNonFormal string       `json:"id_pddk_non_formal"`
	IDPelamar       string       `json:"id_pelamar"`
	Institusi       string       `json:"institusi"`
	JenisPendidikan string       `json:"jenis_pendidikan"`
	Kota            string       `json:"kota"`
	TglLulus        sql.NullTime `json:"tgl_lulus"`
	CreatedBy       string       `json:"created_by"`
}

func (q *Queries) CreatePelamarPendidikanNonFormal(ctx context.Context, arg CreatePelamarPendidikanNonFormalParams) (PelamarPendidikanNonFormal, error) {
	row := q.db.QueryRowContext(ctx, createPelamarPendidikanNonFormal,
		arg.IDPddkNonFormal,
		arg.IDPelamar,
		arg.Institusi,
		arg.JenisPendidikan,
		arg.Kota,
		arg.TglLulus,
		arg.CreatedBy,
	)
	var i PelamarPendidikanNonFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkNonFormal,
		&i.IDPelamar,
		&i.Institusi,
		&i.JenisPendidikan,
		&i.Kota,
		&i.TglLulus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPelamarPendidikanNonFormalByID = `-- name: GetPelamarPendidikanNonFormalByID :one
SELECT id, id_pddk_non_formal, id_pelamar, institusi, jenis_pendidikan, kota, tgl_lulus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pendidikan_non_formal
WHERE id_pddk_non_formal = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPelamarPendidikanNonFormalByID(ctx context.Context, idPddkNonFormal string) (PelamarPendidikanNonFormal, error) {
	row := q.db.QueryRowContext(ctx, getPelamarPendidikanNonFormalByID, idPddkNonFormal)
	var i PelamarPendidikanNonFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkNonFormal,
		&i.IDPelamar,
		&i.Institusi,
		&i.JenisPendidikan,
		&i.Kota,
		&i.TglLulus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPelamarPendidikanNonFormal = `-- name: ListPelamarPendidikanNonFormal :many
SELECT id, id_pddk_non_formal, id_pelamar, institusi, jenis_pendidikan, kota, tgl_lulus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pendidikan_non_formal
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPelamarPendidikanNonFormal(ctx context.Context) ([]PelamarPendidikanNonFormal, error) {
	rows, err := q.db.QueryContext(ctx, listPelamarPendidikanNonFormal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarPendidikanNonFormal
	for rows.Next() {
		var i PelamarPendidikanNonFormal
		if err := rows.Scan(
			&i.ID,
			&i.IDPddkNonFormal,
			&i.IDPelamar,
			&i.Institusi,
			&i.JenisPendidikan,
			&i.Kota,
			&i.TglLulus,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePelamarPendidikanNonFormal = `-- name: RestorePelamarPendidikanNonFormal :exec
UPDATE pelamar_pendidikan_non_formal
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_pddk_non_formal = $1
`

func (q *Queries) RestorePelamarPendidikanNonFormal(ctx context.Context, idPddkNonFormal string) error {
	_, err := q.db.ExecContext(ctx, restorePelamarPendidikanNonFormal, idPddkNonFormal)
	return err
}

const softDeletePelamarPendidikanNonFormal = `-- name: SoftDeletePelamarPendidikanNonFormal :exec
UPDATE pelamar_pendidikan_non_formal
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_pddk_non_formal = $2
  AND deleted_at IS NULL
`

type SoftDeletePelamarPendidikanNonFormalParams struct {
	DeletedBy       sql.NullString `json:"deleted_by"`
	IDPddkNonFormal string         `json:"id_pddk_non_formal"`
}

func (q *Queries) SoftDeletePelamarPendidikanNonFormal(ctx context.Context, arg SoftDeletePelamarPendidikanNonFormalParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePelamarPendidikanNonFormal, arg.DeletedBy, arg.IDPddkNonFormal)
	return err
}

const updatePelamarPendidikanNonFormal = `-- name: UpdatePelamarPendidikanNonFormal :one
UPDATE pelamar_pendidikan_non_formal
SET
    institusi = $1,
    jenis_pendidikan = $2,
    kota = $3,
    tgl_lulus = $4,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $5
WHERE id_pddk_non_formal = $6
  AND deleted_at IS NULL
    RETURNING id, id_pddk_non_formal, id_pelamar, institusi, jenis_pendidikan, kota, tgl_lulus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePelamarPendidikanNonFormalParams struct {
	Institusi       string         `json:"institusi"`
	JenisPendidikan string         `json:"jenis_pendidikan"`
	Kota            string         `json:"kota"`
	TglLulus        sql.NullTime   `json:"tgl_lulus"`
	UpdatedBy       sql.NullString `json:"updated_by"`
	IDPddkNonFormal string         `json:"id_pddk_non_formal"`
}

func (q *Queries) UpdatePelamarPendidikanNonFormal(ctx context.Context, arg UpdatePelamarPendidikanNonFormalParams) (PelamarPendidikanNonFormal, error) {
	row := q.db.QueryRowContext(ctx, updatePelamarPendidikanNonFormal,
		arg.Institusi,
		arg.JenisPendidikan,
		arg.Kota,
		arg.TglLulus,
		arg.UpdatedBy,
		arg.IDPddkNonFormal,
	)
	var i PelamarPendidikanNonFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkNonFormal,
		&i.IDPelamar,
		&i.Institusi,
		&i.JenisPendidikan,
		&i.Kota,
		&i.TglLulus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
