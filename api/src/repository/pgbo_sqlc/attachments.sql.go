// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attachments.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAttachment = `-- name: CreateAttachment :one
INSERT INTO attachments (
    attach_id, task_id, attach_name, attach_url,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4,
    (now() at time zone 'UTC')::TIMESTAMP, $5
) RETURNING id, attach_id, task_id, attach_name, attach_url, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateAttachmentParams struct {
	AttachID   string         `json:"attach_id"`
	TaskID     string         `json:"task_id"`
	AttachName sql.NullString `json:"attach_name"`
	AttachUrl  sql.NullString `json:"attach_url"`
	CreatedBy  string         `json:"created_by"`
}

func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, createAttachment,
		arg.AttachID,
		arg.TaskID,
		arg.AttachName,
		arg.AttachUrl,
		arg.CreatedBy,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.AttachID,
		&i.TaskID,
		&i.AttachName,
		&i.AttachUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getAttachmentByID = `-- name: GetAttachmentByID :one
SELECT id, attach_id, task_id, attach_name, attach_url, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM attachments
WHERE attach_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetAttachmentByID(ctx context.Context, attachID string) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, getAttachmentByID, attachID)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.AttachID,
		&i.TaskID,
		&i.AttachName,
		&i.AttachUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listAttachments = `-- name: ListAttachments :many
SELECT id, attach_id, task_id, attach_name, attach_url, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM attachments
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListAttachments(ctx context.Context) ([]Attachment, error) {
	rows, err := q.db.QueryContext(ctx, listAttachments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attachment
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.AttachID,
			&i.TaskID,
			&i.AttachName,
			&i.AttachUrl,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAttachment = `-- name: RestoreAttachment :exec
UPDATE attachments
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE attach_id = $1
`

func (q *Queries) RestoreAttachment(ctx context.Context, attachID string) error {
	_, err := q.db.ExecContext(ctx, restoreAttachment, attachID)
	return err
}

const softDeleteAttachment = `-- name: SoftDeleteAttachment :exec
UPDATE attachments
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE attach_id = $2
`

type SoftDeleteAttachmentParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	AttachID  string         `json:"attach_id"`
}

func (q *Queries) SoftDeleteAttachment(ctx context.Context, arg SoftDeleteAttachmentParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteAttachment, arg.DeletedBy, arg.AttachID)
	return err
}

const updateAttachment = `-- name: UpdateAttachment :one
UPDATE attachments
SET
    task_id = $1,
    attach_name = $2,
    attach_url = $3,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $4
WHERE attach_id = $5
  AND deleted_at IS NULL
RETURNING id, attach_id, task_id, attach_name, attach_url, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateAttachmentParams struct {
	TaskID     string         `json:"task_id"`
	AttachName sql.NullString `json:"attach_name"`
	AttachUrl  sql.NullString `json:"attach_url"`
	UpdatedBy  sql.NullString `json:"updated_by"`
	AttachID   string         `json:"attach_id"`
}

func (q *Queries) UpdateAttachment(ctx context.Context, arg UpdateAttachmentParams) (Attachment, error) {
	row := q.db.QueryRowContext(ctx, updateAttachment,
		arg.TaskID,
		arg.AttachName,
		arg.AttachUrl,
		arg.UpdatedBy,
		arg.AttachID,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.AttachID,
		&i.TaskID,
		&i.AttachName,
		&i.AttachUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
