// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: damage_history.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createDamageHistory = `-- name: CreateDamageHistory :one
INSERT INTO damage_history (
    damage_history_id,
    inventaris_id,
    id_pegawai,
    tgl_rusak,
    tgl_awal_perbaikan,
    tgl_selesai_perbaikan,
    description,
    biaya_perbaikan,
    vendor_perbaikan,
    status,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             $7,
             $8,
             $9,
             $10::status_enum,
             (now() at time zone 'UTC')::TIMESTAMP,
             $11
         )
    RETURNING id, damage_history_id, inventaris_id, id_pegawai, tgl_rusak, tgl_awal_perbaikan, tgl_selesai_perbaikan, description, biaya_perbaikan, vendor_perbaikan, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateDamageHistoryParams struct {
	DamageHistoryID     string         `json:"damage_history_id"`
	InventarisID        string         `json:"inventaris_id"`
	IDPegawai           string         `json:"id_pegawai"`
	TglRusak            time.Time      `json:"tgl_rusak"`
	TglAwalPerbaikan    time.Time      `json:"tgl_awal_perbaikan"`
	TglSelesaiPerbaikan time.Time      `json:"tgl_selesai_perbaikan"`
	Description         sql.NullString `json:"description"`
	BiayaPerbaikan      int64          `json:"biaya_perbaikan"`
	VendorPerbaikan     int64          `json:"vendor_perbaikan"`
	Status              interface{}    `json:"status"`
	CreatedBy           string         `json:"created_by"`
}

func (q *Queries) CreateDamageHistory(ctx context.Context, arg CreateDamageHistoryParams) (DamageHistory, error) {
	row := q.db.QueryRowContext(ctx, createDamageHistory,
		arg.DamageHistoryID,
		arg.InventarisID,
		arg.IDPegawai,
		arg.TglRusak,
		arg.TglAwalPerbaikan,
		arg.TglSelesaiPerbaikan,
		arg.Description,
		arg.BiayaPerbaikan,
		arg.VendorPerbaikan,
		arg.Status,
		arg.CreatedBy,
	)
	var i DamageHistory
	err := row.Scan(
		&i.ID,
		&i.DamageHistoryID,
		&i.InventarisID,
		&i.IDPegawai,
		&i.TglRusak,
		&i.TglAwalPerbaikan,
		&i.TglSelesaiPerbaikan,
		&i.Description,
		&i.BiayaPerbaikan,
		&i.VendorPerbaikan,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getDamageHistoryByID = `-- name: GetDamageHistoryByID :one
SELECT id, damage_history_id, inventaris_id, id_pegawai, tgl_rusak, tgl_awal_perbaikan, tgl_selesai_perbaikan, description, biaya_perbaikan, vendor_perbaikan, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM damage_history
WHERE damage_history_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetDamageHistoryByID(ctx context.Context, damageHistoryID string) (DamageHistory, error) {
	row := q.db.QueryRowContext(ctx, getDamageHistoryByID, damageHistoryID)
	var i DamageHistory
	err := row.Scan(
		&i.ID,
		&i.DamageHistoryID,
		&i.InventarisID,
		&i.IDPegawai,
		&i.TglRusak,
		&i.TglAwalPerbaikan,
		&i.TglSelesaiPerbaikan,
		&i.Description,
		&i.BiayaPerbaikan,
		&i.VendorPerbaikan,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listDamageHistory = `-- name: ListDamageHistory :many
SELECT id, damage_history_id, inventaris_id, id_pegawai, tgl_rusak, tgl_awal_perbaikan, tgl_selesai_perbaikan, description, biaya_perbaikan, vendor_perbaikan, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM damage_history
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListDamageHistory(ctx context.Context) ([]DamageHistory, error) {
	rows, err := q.db.QueryContext(ctx, listDamageHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DamageHistory
	for rows.Next() {
		var i DamageHistory
		if err := rows.Scan(
			&i.ID,
			&i.DamageHistoryID,
			&i.InventarisID,
			&i.IDPegawai,
			&i.TglRusak,
			&i.TglAwalPerbaikan,
			&i.TglSelesaiPerbaikan,
			&i.Description,
			&i.BiayaPerbaikan,
			&i.VendorPerbaikan,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreDamageHistory = `-- name: RestoreDamageHistory :exec
UPDATE damage_history
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE damage_history_id = $1
`

func (q *Queries) RestoreDamageHistory(ctx context.Context, damageHistoryID string) error {
	_, err := q.db.ExecContext(ctx, restoreDamageHistory, damageHistoryID)
	return err
}

const softDeleteDamageHistory = `-- name: SoftDeleteDamageHistory :exec
UPDATE damage_history
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE damage_history_id = $2
`

type SoftDeleteDamageHistoryParams struct {
	DeletedBy       sql.NullString `json:"deleted_by"`
	DamageHistoryID string         `json:"damage_history_id"`
}

func (q *Queries) SoftDeleteDamageHistory(ctx context.Context, arg SoftDeleteDamageHistoryParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteDamageHistory, arg.DeletedBy, arg.DamageHistoryID)
	return err
}

const updateDamageHistory = `-- name: UpdateDamageHistory :one
UPDATE damage_history
SET
    inventaris_id = $1,
    id_pegawai = $2,
    tgl_rusak = $3,
    tgl_awal_perbaikan = $4,
    tgl_selesai_perbaikan = $5,
    description = $6,
    biaya_perbaikan = $7,
    vendor_perbaikan = $8,
    status = $9::status_enum,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $10
WHERE damage_history_id = $11
  AND deleted_at IS NULL
    RETURNING id, damage_history_id, inventaris_id, id_pegawai, tgl_rusak, tgl_awal_perbaikan, tgl_selesai_perbaikan, description, biaya_perbaikan, vendor_perbaikan, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateDamageHistoryParams struct {
	InventarisID        string         `json:"inventaris_id"`
	IDPegawai           string         `json:"id_pegawai"`
	TglRusak            time.Time      `json:"tgl_rusak"`
	TglAwalPerbaikan    time.Time      `json:"tgl_awal_perbaikan"`
	TglSelesaiPerbaikan time.Time      `json:"tgl_selesai_perbaikan"`
	Description         sql.NullString `json:"description"`
	BiayaPerbaikan      int64          `json:"biaya_perbaikan"`
	VendorPerbaikan     int64          `json:"vendor_perbaikan"`
	Status              interface{}    `json:"status"`
	UpdatedBy           sql.NullString `json:"updated_by"`
	DamageHistoryID     string         `json:"damage_history_id"`
}

func (q *Queries) UpdateDamageHistory(ctx context.Context, arg UpdateDamageHistoryParams) (DamageHistory, error) {
	row := q.db.QueryRowContext(ctx, updateDamageHistory,
		arg.InventarisID,
		arg.IDPegawai,
		arg.TglRusak,
		arg.TglAwalPerbaikan,
		arg.TglSelesaiPerbaikan,
		arg.Description,
		arg.BiayaPerbaikan,
		arg.VendorPerbaikan,
		arg.Status,
		arg.UpdatedBy,
		arg.DamageHistoryID,
	)
	var i DamageHistory
	err := row.Scan(
		&i.ID,
		&i.DamageHistoryID,
		&i.InventarisID,
		&i.IDPegawai,
		&i.TglRusak,
		&i.TglAwalPerbaikan,
		&i.TglSelesaiPerbaikan,
		&i.Description,
		&i.BiayaPerbaikan,
		&i.VendorPerbaikan,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
