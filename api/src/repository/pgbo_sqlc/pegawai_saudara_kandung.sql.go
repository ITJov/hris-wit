// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pegawai_saudara_kandung.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPegawaiSaudaraKandung = `-- name: CreatePegawaiSaudaraKandung :one
INSERT INTO pegawai_saudara_kandung (
    id_saudara, id_pegawai, nama, jenis_kelamin, tempat_lahir,
    tgl_lahir, pendidikan_pekerjaan, created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7,
    (now() at time zone 'UTC')::TIMESTAMP, $8
) RETURNING id, id_saudara, id_pegawai, nama, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_pekerjaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePegawaiSaudaraKandungParams struct {
	IDSaudara           string         `json:"id_saudara"`
	IDPegawai           string         `json:"id_pegawai"`
	Nama                string         `json:"nama"`
	JenisKelamin        interface{}    `json:"jenis_kelamin"`
	TempatLahir         sql.NullString `json:"tempat_lahir"`
	TglLahir            sql.NullTime   `json:"tgl_lahir"`
	PendidikanPekerjaan sql.NullString `json:"pendidikan_pekerjaan"`
	CreatedBy           string         `json:"created_by"`
}

func (q *Queries) CreatePegawaiSaudaraKandung(ctx context.Context, arg CreatePegawaiSaudaraKandungParams) (PegawaiSaudaraKandung, error) {
	row := q.db.QueryRowContext(ctx, createPegawaiSaudaraKandung,
		arg.IDSaudara,
		arg.IDPegawai,
		arg.Nama,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.TglLahir,
		arg.PendidikanPekerjaan,
		arg.CreatedBy,
	)
	var i PegawaiSaudaraKandung
	err := row.Scan(
		&i.ID,
		&i.IDSaudara,
		&i.IDPegawai,
		&i.Nama,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanPekerjaan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPegawaiSaudaraKandungByID = `-- name: GetPegawaiSaudaraKandungByID :one
SELECT id, id_saudara, id_pegawai, nama, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_pekerjaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_saudara_kandung
WHERE id_saudara = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPegawaiSaudaraKandungByID(ctx context.Context, idSaudara string) (PegawaiSaudaraKandung, error) {
	row := q.db.QueryRowContext(ctx, getPegawaiSaudaraKandungByID, idSaudara)
	var i PegawaiSaudaraKandung
	err := row.Scan(
		&i.ID,
		&i.IDSaudara,
		&i.IDPegawai,
		&i.Nama,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanPekerjaan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPegawaiSaudaraKandung = `-- name: ListPegawaiSaudaraKandung :many
SELECT id, id_saudara, id_pegawai, nama, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_pekerjaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_saudara_kandung
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPegawaiSaudaraKandung(ctx context.Context) ([]PegawaiSaudaraKandung, error) {
	rows, err := q.db.QueryContext(ctx, listPegawaiSaudaraKandung)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PegawaiSaudaraKandung
	for rows.Next() {
		var i PegawaiSaudaraKandung
		if err := rows.Scan(
			&i.ID,
			&i.IDSaudara,
			&i.IDPegawai,
			&i.Nama,
			&i.JenisKelamin,
			&i.TempatLahir,
			&i.TglLahir,
			&i.PendidikanPekerjaan,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePegawaiSaudaraKandung = `-- name: RestorePegawaiSaudaraKandung :exec
UPDATE pegawai_saudara_kandung
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_saudara = $1
`

func (q *Queries) RestorePegawaiSaudaraKandung(ctx context.Context, idSaudara string) error {
	_, err := q.db.ExecContext(ctx, restorePegawaiSaudaraKandung, idSaudara)
	return err
}

const softDeletePegawaiSaudaraKandung = `-- name: SoftDeletePegawaiSaudaraKandung :exec
UPDATE pegawai_saudara_kandung
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_saudara = $2
  AND deleted_at IS NULL
`

type SoftDeletePegawaiSaudaraKandungParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	IDSaudara string         `json:"id_saudara"`
}

func (q *Queries) SoftDeletePegawaiSaudaraKandung(ctx context.Context, arg SoftDeletePegawaiSaudaraKandungParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePegawaiSaudaraKandung, arg.DeletedBy, arg.IDSaudara)
	return err
}

const updatePegawaiSaudaraKandung = `-- name: UpdatePegawaiSaudaraKandung :one
UPDATE pegawai_saudara_kandung
SET
    nama = $1,
    jenis_kelamin = $2,
    tempat_lahir = $3,
    tgl_lahir = $4,
    pendidikan_pekerjaan = $5,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $6
WHERE id_saudara = $7
  AND deleted_at IS NULL
    RETURNING id, id_saudara, id_pegawai, nama, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_pekerjaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePegawaiSaudaraKandungParams struct {
	Nama                string         `json:"nama"`
	JenisKelamin        interface{}    `json:"jenis_kelamin"`
	TempatLahir         sql.NullString `json:"tempat_lahir"`
	TglLahir            sql.NullTime   `json:"tgl_lahir"`
	PendidikanPekerjaan sql.NullString `json:"pendidikan_pekerjaan"`
	UpdatedBy           sql.NullString `json:"updated_by"`
	IDSaudara           string         `json:"id_saudara"`
}

func (q *Queries) UpdatePegawaiSaudaraKandung(ctx context.Context, arg UpdatePegawaiSaudaraKandungParams) (PegawaiSaudaraKandung, error) {
	row := q.db.QueryRowContext(ctx, updatePegawaiSaudaraKandung,
		arg.Nama,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.TglLahir,
		arg.PendidikanPekerjaan,
		arg.UpdatedBy,
		arg.IDSaudara,
	)
	var i PegawaiSaudaraKandung
	err := row.Scan(
		&i.ID,
		&i.IDSaudara,
		&i.IDPegawai,
		&i.Nama,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanPekerjaan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
