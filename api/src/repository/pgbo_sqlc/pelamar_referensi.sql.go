// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pelamar_referensi.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPelamarReferensi = `-- name: CreatePelamarReferensi :one
INSERT INTO pelamar_referensi (
    id_referensi, id_pelamar, nama, nama_perusahaan, jabatan, no_telp_perusahaan,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6,
    (now() at time zone 'UTC')::TIMESTAMP, $7
) RETURNING id, id_referensi, id_pelamar, nama, nama_perusahaan, jabatan, no_telp_perusahaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePelamarReferensiParams struct {
	IDReferensi      string         `json:"id_referensi"`
	IDPelamar        string         `json:"id_pelamar"`
	Nama             string         `json:"nama"`
	NamaPerusahaan   sql.NullString `json:"nama_perusahaan"`
	Jabatan          sql.NullString `json:"jabatan"`
	NoTelpPerusahaan sql.NullString `json:"no_telp_perusahaan"`
	CreatedBy        string         `json:"created_by"`
}

func (q *Queries) CreatePelamarReferensi(ctx context.Context, arg CreatePelamarReferensiParams) (PelamarReferensi, error) {
	row := q.db.QueryRowContext(ctx, createPelamarReferensi,
		arg.IDReferensi,
		arg.IDPelamar,
		arg.Nama,
		arg.NamaPerusahaan,
		arg.Jabatan,
		arg.NoTelpPerusahaan,
		arg.CreatedBy,
	)
	var i PelamarReferensi
	err := row.Scan(
		&i.ID,
		&i.IDReferensi,
		&i.IDPelamar,
		&i.Nama,
		&i.NamaPerusahaan,
		&i.Jabatan,
		&i.NoTelpPerusahaan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPelamarReferensiByID = `-- name: GetPelamarReferensiByID :one
SELECT id, id_referensi, id_pelamar, nama, nama_perusahaan, jabatan, no_telp_perusahaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_referensi
WHERE id_referensi = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPelamarReferensiByID(ctx context.Context, idReferensi string) (PelamarReferensi, error) {
	row := q.db.QueryRowContext(ctx, getPelamarReferensiByID, idReferensi)
	var i PelamarReferensi
	err := row.Scan(
		&i.ID,
		&i.IDReferensi,
		&i.IDPelamar,
		&i.Nama,
		&i.NamaPerusahaan,
		&i.Jabatan,
		&i.NoTelpPerusahaan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPelamarReferensi = `-- name: ListPelamarReferensi :many
SELECT id, id_referensi, id_pelamar, nama, nama_perusahaan, jabatan, no_telp_perusahaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_referensi
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPelamarReferensi(ctx context.Context) ([]PelamarReferensi, error) {
	rows, err := q.db.QueryContext(ctx, listPelamarReferensi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarReferensi
	for rows.Next() {
		var i PelamarReferensi
		if err := rows.Scan(
			&i.ID,
			&i.IDReferensi,
			&i.IDPelamar,
			&i.Nama,
			&i.NamaPerusahaan,
			&i.Jabatan,
			&i.NoTelpPerusahaan,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePelamarReferensi = `-- name: RestorePelamarReferensi :exec
UPDATE pelamar_referensi
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_referensi = $1
`

func (q *Queries) RestorePelamarReferensi(ctx context.Context, idReferensi string) error {
	_, err := q.db.ExecContext(ctx, restorePelamarReferensi, idReferensi)
	return err
}

const softDeletePelamarReferensi = `-- name: SoftDeletePelamarReferensi :exec
UPDATE pelamar_referensi
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_referensi = $2
  AND deleted_at IS NULL
`

type SoftDeletePelamarReferensiParams struct {
	DeletedBy   sql.NullString `json:"deleted_by"`
	IDReferensi string         `json:"id_referensi"`
}

func (q *Queries) SoftDeletePelamarReferensi(ctx context.Context, arg SoftDeletePelamarReferensiParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePelamarReferensi, arg.DeletedBy, arg.IDReferensi)
	return err
}

const updatePelamarReferensi = `-- name: UpdatePelamarReferensi :one
UPDATE pelamar_referensi
SET
    nama = $1,
    nama_perusahaan = $2,
    jabatan = $3,
    no_telp_perusahaan = $4,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $5
WHERE id_referensi = $6
  AND deleted_at IS NULL
    RETURNING id, id_referensi, id_pelamar, nama, nama_perusahaan, jabatan, no_telp_perusahaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePelamarReferensiParams struct {
	Nama             string         `json:"nama"`
	NamaPerusahaan   sql.NullString `json:"nama_perusahaan"`
	Jabatan          sql.NullString `json:"jabatan"`
	NoTelpPerusahaan sql.NullString `json:"no_telp_perusahaan"`
	UpdatedBy        sql.NullString `json:"updated_by"`
	IDReferensi      string         `json:"id_referensi"`
}

func (q *Queries) UpdatePelamarReferensi(ctx context.Context, arg UpdatePelamarReferensiParams) (PelamarReferensi, error) {
	row := q.db.QueryRowContext(ctx, updatePelamarReferensi,
		arg.Nama,
		arg.NamaPerusahaan,
		arg.Jabatan,
		arg.NoTelpPerusahaan,
		arg.UpdatedBy,
		arg.IDReferensi,
	)
	var i PelamarReferensi
	err := row.Scan(
		&i.ID,
		&i.IDReferensi,
		&i.IDPelamar,
		&i.Nama,
		&i.NamaPerusahaan,
		&i.Jabatan,
		&i.NoTelpPerusahaan,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
