// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: brand.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createBrand = `-- name: CreateBrand :one
INSERT INTO brand (
    brand_id,
    nama_brand,
    status,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3::status_enum,
             (now() at time zone 'UTC')::TIMESTAMP,
             $4
         )
    RETURNING id, brand_id, nama_brand, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateBrandParams struct {
	BrandID   string      `json:"brand_id"`
	NamaBrand string      `json:"nama_brand"`
	Status    interface{} `json:"status"`
	CreatedBy string      `json:"created_by"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, createBrand,
		arg.BrandID,
		arg.NamaBrand,
		arg.Status,
		arg.CreatedBy,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.NamaBrand,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getBrandByID = `-- name: GetBrandByID :one
SELECT id, brand_id, nama_brand, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM brand
WHERE brand_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetBrandByID(ctx context.Context, brandID string) (Brand, error) {
	row := q.db.QueryRowContext(ctx, getBrandByID, brandID)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.NamaBrand,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listBrands = `-- name: ListBrands :many
SELECT id, brand_id, nama_brand, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM brand
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListBrands(ctx context.Context) ([]Brand, error) {
	rows, err := q.db.QueryContext(ctx, listBrands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brand
	for rows.Next() {
		var i Brand
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.NamaBrand,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteBrand = `-- name: SoftDeleteBrand :exec
UPDATE brand
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE brand_id = $2
`

type SoftDeleteBrandParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	BrandID   string         `json:"brand_id"`
}

func (q *Queries) SoftDeleteBrand(ctx context.Context, arg SoftDeleteBrandParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteBrand, arg.DeletedBy, arg.BrandID)
	return err
}

const updateBrand = `-- name: UpdateBrand :one
UPDATE brand
SET
    nama_brand = $1,
    status = $2::status_enum,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $3
WHERE brand_id = $4
  AND deleted_at IS NULL
    RETURNING id, brand_id, nama_brand, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateBrandParams struct {
	NamaBrand string         `json:"nama_brand"`
	Status    interface{}    `json:"status"`
	UpdatedBy sql.NullString `json:"updated_by"`
	BrandID   string         `json:"brand_id"`
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, updateBrand,
		arg.NamaBrand,
		arg.Status,
		arg.UpdatedBy,
		arg.BrandID,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.NamaBrand,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
