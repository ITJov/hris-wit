// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vendor.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createVendor = `-- name: CreateVendor :one
INSERT INTO vendor (
    vendor_id,
    nama_vendor,
    alamat,
    status,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3,
             $4::status_enum,
             (now() at time zone 'UTC')::TIMESTAMP,
             $5
         )
    RETURNING id, vendor_id, nama_vendor, alamat, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateVendorParams struct {
	VendorID   string      `json:"vendor_id"`
	NamaVendor string      `json:"nama_vendor"`
	Alamat     string      `json:"alamat"`
	Status     interface{} `json:"status"`
	CreatedBy  string      `json:"created_by"`
}

func (q *Queries) CreateVendor(ctx context.Context, arg CreateVendorParams) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, createVendor,
		arg.VendorID,
		arg.NamaVendor,
		arg.Alamat,
		arg.Status,
		arg.CreatedBy,
	)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.NamaVendor,
		&i.Alamat,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getVendorByID = `-- name: GetVendorByID :one
SELECT id, vendor_id, nama_vendor, alamat, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM vendor
WHERE vendor_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetVendorByID(ctx context.Context, vendorID string) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, getVendorByID, vendorID)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.NamaVendor,
		&i.Alamat,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listVendors = `-- name: ListVendors :many
SELECT id, vendor_id, nama_vendor, alamat, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM vendor
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListVendors(ctx context.Context) ([]Vendor, error) {
	rows, err := q.db.QueryContext(ctx, listVendors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vendor
	for rows.Next() {
		var i Vendor
		if err := rows.Scan(
			&i.ID,
			&i.VendorID,
			&i.NamaVendor,
			&i.Alamat,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreVendor = `-- name: RestoreVendor :exec
UPDATE vendor
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE vendor_id = $1
`

func (q *Queries) RestoreVendor(ctx context.Context, vendorID string) error {
	_, err := q.db.ExecContext(ctx, restoreVendor, vendorID)
	return err
}

const softDeleteVendor = `-- name: SoftDeleteVendor :exec
UPDATE vendor
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE vendor_id = $2
`

type SoftDeleteVendorParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	VendorID  string         `json:"vendor_id"`
}

func (q *Queries) SoftDeleteVendor(ctx context.Context, arg SoftDeleteVendorParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteVendor, arg.DeletedBy, arg.VendorID)
	return err
}

const updateVendor = `-- name: UpdateVendor :one
UPDATE vendor
SET
    nama_vendor = $1,
    alamat = $2,
    status = $3::status_enum,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $4
WHERE vendor_id = $5
  AND deleted_at IS NULL
    RETURNING id, vendor_id, nama_vendor, alamat, status, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateVendorParams struct {
	NamaVendor string         `json:"nama_vendor"`
	Alamat     string         `json:"alamat"`
	Status     interface{}    `json:"status"`
	UpdatedBy  sql.NullString `json:"updated_by"`
	VendorID   string         `json:"vendor_id"`
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, updateVendor,
		arg.NamaVendor,
		arg.Alamat,
		arg.Status,
		arg.UpdatedBy,
		arg.VendorID,
	)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.NamaVendor,
		&i.Alamat,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
