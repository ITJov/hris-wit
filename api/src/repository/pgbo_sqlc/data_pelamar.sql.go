// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: data_pelamar.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPelamar = `-- name: CreatePelamar :one
INSERT INTO data_pelamar (
    id_data_pelamar, id_lowongan_pekerjaan, email, nama_lengkap, tempat_lahir,
    tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah,
    status_menikah, no_ktp, no_npwp, status, asal_kota, gaji_terakhir, harapan_gaji,
    sedang_bekerja, ketersediaan_bekerja, sumber_informasi, alasan, ketersediaan_inter,
    profesi_kerja, created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8, $9, $10, $11, $12,
    $13, $14, $15, $16, $17, $18, $19,
    $20, $21, $22, $23, $24,
    $25, (now() at time zone 'UTC')::TIMESTAMP, $26
) RETURNING id, id_data_pelamar, id_lowongan_pekerjaan, email, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, status_menikah, no_ktp, no_npwp, status, asal_kota, gaji_terakhir, harapan_gaji, sedang_bekerja, ketersediaan_bekerja, sumber_informasi, alasan, ketersediaan_inter, profesi_kerja, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePelamarParams struct {
	IDDataPelamar       string         `json:"id_data_pelamar"`
	IDLowonganPekerjaan string         `json:"id_lowongan_pekerjaan"`
	Email               string         `json:"email"`
	NamaLengkap         string         `json:"nama_lengkap"`
	TempatLahir         sql.NullString `json:"tempat_lahir"`
	TglLahir            sql.NullTime   `json:"tgl_lahir"`
	JenisKelamin        interface{}    `json:"jenis_kelamin"`
	Kewarganegaraan     sql.NullString `json:"kewarganegaraan"`
	Phone               sql.NullString `json:"phone"`
	Mobile              sql.NullString `json:"mobile"`
	Agama               sql.NullString `json:"agama"`
	GolDarah            sql.NullString `json:"gol_darah"`
	StatusMenikah       sql.NullBool   `json:"status_menikah"`
	NoKtp               sql.NullString `json:"no_ktp"`
	NoNpwp              sql.NullString `json:"no_npwp"`
	Status              interface{}    `json:"status"`
	AsalKota            sql.NullString `json:"asal_kota"`
	GajiTerakhir        sql.NullString `json:"gaji_terakhir"`
	HarapanGaji         sql.NullString `json:"harapan_gaji"`
	SedangBekerja       sql.NullString `json:"sedang_bekerja"`
	KetersediaanBekerja sql.NullTime   `json:"ketersediaan_bekerja"`
	SumberInformasi     sql.NullString `json:"sumber_informasi"`
	Alasan              sql.NullString `json:"alasan"`
	KetersediaanInter   sql.NullTime   `json:"ketersediaan_inter"`
	ProfesiKerja        interface{}    `json:"profesi_kerja"`
	CreatedBy           string         `json:"created_by"`
}

func (q *Queries) CreatePelamar(ctx context.Context, arg CreatePelamarParams) (DataPelamar, error) {
	row := q.db.QueryRowContext(ctx, createPelamar,
		arg.IDDataPelamar,
		arg.IDLowonganPekerjaan,
		arg.Email,
		arg.NamaLengkap,
		arg.TempatLahir,
		arg.TglLahir,
		arg.JenisKelamin,
		arg.Kewarganegaraan,
		arg.Phone,
		arg.Mobile,
		arg.Agama,
		arg.GolDarah,
		arg.StatusMenikah,
		arg.NoKtp,
		arg.NoNpwp,
		arg.Status,
		arg.AsalKota,
		arg.GajiTerakhir,
		arg.HarapanGaji,
		arg.SedangBekerja,
		arg.KetersediaanBekerja,
		arg.SumberInformasi,
		arg.Alasan,
		arg.KetersediaanInter,
		arg.ProfesiKerja,
		arg.CreatedBy,
	)
	var i DataPelamar
	err := row.Scan(
		&i.ID,
		&i.IDDataPelamar,
		&i.IDLowonganPekerjaan,
		&i.Email,
		&i.NamaLengkap,
		&i.TempatLahir,
		&i.TglLahir,
		&i.JenisKelamin,
		&i.Kewarganegaraan,
		&i.Phone,
		&i.Mobile,
		&i.Agama,
		&i.GolDarah,
		&i.StatusMenikah,
		&i.NoKtp,
		&i.NoNpwp,
		&i.Status,
		&i.AsalKota,
		&i.GajiTerakhir,
		&i.HarapanGaji,
		&i.SedangBekerja,
		&i.KetersediaanBekerja,
		&i.SumberInformasi,
		&i.Alasan,
		&i.KetersediaanInter,
		&i.ProfesiKerja,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getKeluargaByPelamarID = `-- name: GetKeluargaByPelamarID :one
SELECT id, id_keluarga, id_pelamar, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_keluarga
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) GetKeluargaByPelamarID(ctx context.Context, idDataPelamar string) (PelamarKeluarga, error) {
	row := q.db.QueryRowContext(ctx, getKeluargaByPelamarID, idDataPelamar)
	var i PelamarKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPelamar,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPelamarByID = `-- name: GetPelamarByID :one
SELECT id, id_data_pelamar, id_lowongan_pekerjaan, email, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, status_menikah, no_ktp, no_npwp, status, asal_kota, gaji_terakhir, harapan_gaji, sedang_bekerja, ketersediaan_bekerja, sumber_informasi, alasan, ketersediaan_inter, profesi_kerja, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM data_pelamar WHERE id_data_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPelamarByID(ctx context.Context, idDataPelamar string) (DataPelamar, error) {
	row := q.db.QueryRowContext(ctx, getPelamarByID, idDataPelamar)
	var i DataPelamar
	err := row.Scan(
		&i.ID,
		&i.IDDataPelamar,
		&i.IDLowonganPekerjaan,
		&i.Email,
		&i.NamaLengkap,
		&i.TempatLahir,
		&i.TglLahir,
		&i.JenisKelamin,
		&i.Kewarganegaraan,
		&i.Phone,
		&i.Mobile,
		&i.Agama,
		&i.GolDarah,
		&i.StatusMenikah,
		&i.NoKtp,
		&i.NoNpwp,
		&i.Status,
		&i.AsalKota,
		&i.GajiTerakhir,
		&i.HarapanGaji,
		&i.SedangBekerja,
		&i.KetersediaanBekerja,
		&i.SumberInformasi,
		&i.Alasan,
		&i.KetersediaanInter,
		&i.ProfesiKerja,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPendidikanFormalByPelamarID = `-- name: GetPendidikanFormalByPelamarID :many
SELECT id, id_pddk_formal, id_pelamar, jenjang_pddk, nama_sekolah, jurusan_fakultas, kota, tgl_lulus, ipk, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pendidikan_formal
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPendidikanFormalByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarPendidikanFormal, error) {
	rows, err := q.db.QueryContext(ctx, getPendidikanFormalByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarPendidikanFormal
	for rows.Next() {
		var i PelamarPendidikanFormal
		if err := rows.Scan(
			&i.ID,
			&i.IDPddkFormal,
			&i.IDPelamar,
			&i.JenjangPddk,
			&i.NamaSekolah,
			&i.JurusanFakultas,
			&i.Kota,
			&i.TglLulus,
			&i.Ipk,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPengalamanKerjaByPelamarID = `-- name: GetPengalamanKerjaByPelamarID :many
SELECT id, id_pengalaman_kerja, id_pelamar, nama_perusahaan, periode, jabatan, gaji, alasan_pindah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pengalaman_kerja
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPengalamanKerjaByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarPengalamanKerja, error) {
	rows, err := q.db.QueryContext(ctx, getPengalamanKerjaByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarPengalamanKerja
	for rows.Next() {
		var i PelamarPengalamanKerja
		if err := rows.Scan(
			&i.ID,
			&i.IDPengalamanKerja,
			&i.IDPelamar,
			&i.NamaPerusahaan,
			&i.Periode,
			&i.Jabatan,
			&i.Gaji,
			&i.AlasanPindah,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAnakByPelamarID = `-- name: ListAnakByPelamarID :many
SELECT id, id_anak, id_pelamar, nama, jenis_kelamin, tempat_lahir, pendidikan_pekerjaan, tgl_lahir, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_anak
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) ListAnakByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarAnak, error) {
	rows, err := q.db.QueryContext(ctx, listAnakByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarAnak
	for rows.Next() {
		var i PelamarAnak
		if err := rows.Scan(
			&i.ID,
			&i.IDAnak,
			&i.IDPelamar,
			&i.Nama,
			&i.JenisKelamin,
			&i.TempatLahir,
			&i.PendidikanPekerjaan,
			&i.TglLahir,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBahasaByPelamarID = `-- name: ListBahasaByPelamarID :many
SELECT id, id_bahasa, id_pelamar, bahasa, lisan, tulisan, keterangan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_penguasaan_bahasa
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) ListBahasaByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarPenguasaanBahasa, error) {
	rows, err := q.db.QueryContext(ctx, listBahasaByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarPenguasaanBahasa
	for rows.Next() {
		var i PelamarPenguasaanBahasa
		if err := rows.Scan(
			&i.ID,
			&i.IDBahasa,
			&i.IDPelamar,
			&i.Bahasa,
			&i.Lisan,
			&i.Tulisan,
			&i.Keterangan,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPelamar = `-- name: ListPelamar :many
SELECT id, id_data_pelamar, id_lowongan_pekerjaan, email, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, status_menikah, no_ktp, no_npwp, status, asal_kota, gaji_terakhir, harapan_gaji, sedang_bekerja, ketersediaan_bekerja, sumber_informasi, alasan, ketersediaan_inter, profesi_kerja, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM data_pelamar WHERE deleted_at IS NULL ORDER BY created_at DESC
`

func (q *Queries) ListPelamar(ctx context.Context) ([]DataPelamar, error) {
	rows, err := q.db.QueryContext(ctx, listPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataPelamar
	for rows.Next() {
		var i DataPelamar
		if err := rows.Scan(
			&i.ID,
			&i.IDDataPelamar,
			&i.IDLowonganPekerjaan,
			&i.Email,
			&i.NamaLengkap,
			&i.TempatLahir,
			&i.TglLahir,
			&i.JenisKelamin,
			&i.Kewarganegaraan,
			&i.Phone,
			&i.Mobile,
			&i.Agama,
			&i.GolDarah,
			&i.StatusMenikah,
			&i.NoKtp,
			&i.NoNpwp,
			&i.Status,
			&i.AsalKota,
			&i.GajiTerakhir,
			&i.HarapanGaji,
			&i.SedangBekerja,
			&i.KetersediaanBekerja,
			&i.SumberInformasi,
			&i.Alasan,
			&i.KetersediaanInter,
			&i.ProfesiKerja,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendidikanNonFormalByPelamarID = `-- name: ListPendidikanNonFormalByPelamarID :many
SELECT id, id_pddk_non_formal, id_pelamar, institusi, jenis_pendidikan, kota, tgl_lulus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pendidikan_non_formal
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) ListPendidikanNonFormalByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarPendidikanNonFormal, error) {
	rows, err := q.db.QueryContext(ctx, listPendidikanNonFormalByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarPendidikanNonFormal
	for rows.Next() {
		var i PelamarPendidikanNonFormal
		if err := rows.Scan(
			&i.ID,
			&i.IDPddkNonFormal,
			&i.IDPelamar,
			&i.Institusi,
			&i.JenisPendidikan,
			&i.Kota,
			&i.TglLulus,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReferensiByPelamarID = `-- name: ListReferensiByPelamarID :many
SELECT id, id_referensi, id_pelamar, nama, nama_perusahaan, jabatan, no_telp_perusahaan, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_referensi
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) ListReferensiByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarReferensi, error) {
	rows, err := q.db.QueryContext(ctx, listReferensiByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarReferensi
	for rows.Next() {
		var i PelamarReferensi
		if err := rows.Scan(
			&i.ID,
			&i.IDReferensi,
			&i.IDPelamar,
			&i.Nama,
			&i.NamaPerusahaan,
			&i.Jabatan,
			&i.NoTelpPerusahaan,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSaudaraByPelamarID = `-- name: ListSaudaraByPelamarID :many
SELECT id, id_saudara, id_pelamar, nama, jenis_kelamin, tempat_lahir, pendidikan_pekerjaan, tgl_lahir, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_saudara_kandung
WHERE id_pelamar = $1 AND deleted_at IS NULL
`

func (q *Queries) ListSaudaraByPelamarID(ctx context.Context, idDataPelamar string) ([]PelamarSaudaraKandung, error) {
	rows, err := q.db.QueryContext(ctx, listSaudaraByPelamarID, idDataPelamar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarSaudaraKandung
	for rows.Next() {
		var i PelamarSaudaraKandung
		if err := rows.Scan(
			&i.ID,
			&i.IDSaudara,
			&i.IDPelamar,
			&i.Nama,
			&i.JenisKelamin,
			&i.TempatLahir,
			&i.PendidikanPekerjaan,
			&i.TglLahir,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeletePelamar = `-- name: SoftDeletePelamar :exec
UPDATE data_pelamar
SET deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_data_pelamar = $2 AND deleted_at IS NULL
`

type SoftDeletePelamarParams struct {
	DeletedBy     sql.NullString `json:"deleted_by"`
	IDDataPelamar string         `json:"id_data_pelamar"`
}

func (q *Queries) SoftDeletePelamar(ctx context.Context, arg SoftDeletePelamarParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePelamar, arg.DeletedBy, arg.IDDataPelamar)
	return err
}

const updatePelamar = `-- name: UpdatePelamar :one
UPDATE data_pelamar
SET
    status = $1,
    updated_at = NOW()
WHERE id_data_pelamar = $2 AND deleted_at IS NULL
    RETURNING id, id_data_pelamar, id_lowongan_pekerjaan, email, nama_lengkap, tempat_lahir, tgl_lahir, jenis_kelamin, kewarganegaraan, phone, mobile, agama, gol_darah, status_menikah, no_ktp, no_npwp, status, asal_kota, gaji_terakhir, harapan_gaji, sedang_bekerja, ketersediaan_bekerja, sumber_informasi, alasan, ketersediaan_inter, profesi_kerja, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePelamarParams struct {
	Status        interface{} `json:"status"`
	IDDataPelamar string      `json:"id_data_pelamar"`
}

func (q *Queries) UpdatePelamar(ctx context.Context, arg UpdatePelamarParams) (DataPelamar, error) {
	row := q.db.QueryRowContext(ctx, updatePelamar, arg.Status, arg.IDDataPelamar)
	var i DataPelamar
	err := row.Scan(
		&i.ID,
		&i.IDDataPelamar,
		&i.IDLowonganPekerjaan,
		&i.Email,
		&i.NamaLengkap,
		&i.TempatLahir,
		&i.TglLahir,
		&i.JenisKelamin,
		&i.Kewarganegaraan,
		&i.Phone,
		&i.Mobile,
		&i.Agama,
		&i.GolDarah,
		&i.StatusMenikah,
		&i.NoKtp,
		&i.NoNpwp,
		&i.Status,
		&i.AsalKota,
		&i.GajiTerakhir,
		&i.HarapanGaji,
		&i.SedangBekerja,
		&i.KetersediaanBekerja,
		&i.SumberInformasi,
		&i.Alasan,
		&i.KetersediaanInter,
		&i.ProfesiKerja,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
