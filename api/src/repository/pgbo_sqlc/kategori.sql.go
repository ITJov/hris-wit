// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: kategori.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createKategori = `-- name: CreateKategori :one
INSERT INTO kategori (
    kategori_id,
    nama_kategori,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             (now() at time zone 'UTC')::TIMESTAMP,
             $3
         )
    RETURNING id, kategori_id, nama_kategori, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateKategoriParams struct {
	KategoriID   string `json:"kategori_id"`
	NamaKategori string `json:"nama_kategori"`
	CreatedBy    string `json:"created_by"`
}

func (q *Queries) CreateKategori(ctx context.Context, arg CreateKategoriParams) (Kategori, error) {
	row := q.db.QueryRowContext(ctx, createKategori, arg.KategoriID, arg.NamaKategori, arg.CreatedBy)
	var i Kategori
	err := row.Scan(
		&i.ID,
		&i.KategoriID,
		&i.NamaKategori,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getKategoriByID = `-- name: GetKategoriByID :one
SELECT id, kategori_id, nama_kategori, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM kategori
WHERE kategori_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetKategoriByID(ctx context.Context, kategoriID string) (Kategori, error) {
	row := q.db.QueryRowContext(ctx, getKategoriByID, kategoriID)
	var i Kategori
	err := row.Scan(
		&i.ID,
		&i.KategoriID,
		&i.NamaKategori,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listKategori = `-- name: ListKategori :many
SELECT id, kategori_id, nama_kategori, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM kategori
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListKategori(ctx context.Context) ([]Kategori, error) {
	rows, err := q.db.QueryContext(ctx, listKategori)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kategori
	for rows.Next() {
		var i Kategori
		if err := rows.Scan(
			&i.ID,
			&i.KategoriID,
			&i.NamaKategori,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreKategori = `-- name: RestoreKategori :exec
UPDATE kategori
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE kategori_id = $1
`

func (q *Queries) RestoreKategori(ctx context.Context, kategoriID string) error {
	_, err := q.db.ExecContext(ctx, restoreKategori, kategoriID)
	return err
}

const softDeleteKategori = `-- name: SoftDeleteKategori :exec
UPDATE kategori
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE kategori_id = $2
`

type SoftDeleteKategoriParams struct {
	DeletedBy  sql.NullString `json:"deleted_by"`
	KategoriID string         `json:"kategori_id"`
}

func (q *Queries) SoftDeleteKategori(ctx context.Context, arg SoftDeleteKategoriParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteKategori, arg.DeletedBy, arg.KategoriID)
	return err
}

const updateKategori = `-- name: UpdateKategori :one
UPDATE kategori
SET
    nama_kategori = $1,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $2
WHERE kategori_id = $3
  AND deleted_at IS NULL
    RETURNING id, kategori_id, nama_kategori, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateKategoriParams struct {
	NamaKategori string         `json:"nama_kategori"`
	UpdatedBy    sql.NullString `json:"updated_by"`
	KategoriID   string         `json:"kategori_id"`
}

func (q *Queries) UpdateKategori(ctx context.Context, arg UpdateKategoriParams) (Kategori, error) {
	row := q.db.QueryRowContext(ctx, updateKategori, arg.NamaKategori, arg.UpdatedBy, arg.KategoriID)
	var i Kategori
	err := row.Scan(
		&i.ID,
		&i.KategoriID,
		&i.NamaKategori,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
