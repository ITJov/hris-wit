// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pelamar_pengalaman_kerja.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPelamarPengalamanKerja = `-- name: CreatePelamarPengalamanKerja :one
INSERT INTO pelamar_pengalaman_kerja (
    id_pengalaman_kerja, id_pelamar, nama_perusahaan, periode, jabatan, gaji, alasan_pindah,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7,
    (now() at time zone 'UTC')::TIMESTAMP, $8
) RETURNING id, id_pengalaman_kerja, id_pelamar, nama_perusahaan, periode, jabatan, gaji, alasan_pindah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePelamarPengalamanKerjaParams struct {
	IDPengalamanKerja string         `json:"id_pengalaman_kerja"`
	IDPelamar         string         `json:"id_pelamar"`
	NamaPerusahaan    string         `json:"nama_perusahaan"`
	Periode           sql.NullString `json:"periode"`
	Jabatan           sql.NullString `json:"jabatan"`
	Gaji              sql.NullString `json:"gaji"`
	AlasanPindah      sql.NullString `json:"alasan_pindah"`
	CreatedBy         string         `json:"created_by"`
}

func (q *Queries) CreatePelamarPengalamanKerja(ctx context.Context, arg CreatePelamarPengalamanKerjaParams) (PelamarPengalamanKerja, error) {
	row := q.db.QueryRowContext(ctx, createPelamarPengalamanKerja,
		arg.IDPengalamanKerja,
		arg.IDPelamar,
		arg.NamaPerusahaan,
		arg.Periode,
		arg.Jabatan,
		arg.Gaji,
		arg.AlasanPindah,
		arg.CreatedBy,
	)
	var i PelamarPengalamanKerja
	err := row.Scan(
		&i.ID,
		&i.IDPengalamanKerja,
		&i.IDPelamar,
		&i.NamaPerusahaan,
		&i.Periode,
		&i.Jabatan,
		&i.Gaji,
		&i.AlasanPindah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPelamarPengalamanKerjaByID = `-- name: GetPelamarPengalamanKerjaByID :one
SELECT id, id_pengalaman_kerja, id_pelamar, nama_perusahaan, periode, jabatan, gaji, alasan_pindah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pengalaman_kerja
WHERE id_pengalaman_kerja = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPelamarPengalamanKerjaByID(ctx context.Context, idPengalamanKerja string) (PelamarPengalamanKerja, error) {
	row := q.db.QueryRowContext(ctx, getPelamarPengalamanKerjaByID, idPengalamanKerja)
	var i PelamarPengalamanKerja
	err := row.Scan(
		&i.ID,
		&i.IDPengalamanKerja,
		&i.IDPelamar,
		&i.NamaPerusahaan,
		&i.Periode,
		&i.Jabatan,
		&i.Gaji,
		&i.AlasanPindah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPelamarPengalamanKerja = `-- name: ListPelamarPengalamanKerja :many
SELECT id, id_pengalaman_kerja, id_pelamar, nama_perusahaan, periode, jabatan, gaji, alasan_pindah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_pengalaman_kerja
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPelamarPengalamanKerja(ctx context.Context) ([]PelamarPengalamanKerja, error) {
	rows, err := q.db.QueryContext(ctx, listPelamarPengalamanKerja)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarPengalamanKerja
	for rows.Next() {
		var i PelamarPengalamanKerja
		if err := rows.Scan(
			&i.ID,
			&i.IDPengalamanKerja,
			&i.IDPelamar,
			&i.NamaPerusahaan,
			&i.Periode,
			&i.Jabatan,
			&i.Gaji,
			&i.AlasanPindah,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePelamarPengalamanKerja = `-- name: RestorePelamarPengalamanKerja :exec
UPDATE pelamar_pengalaman_kerja
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_pengalaman_kerja = $1
`

func (q *Queries) RestorePelamarPengalamanKerja(ctx context.Context, idPengalamanKerja string) error {
	_, err := q.db.ExecContext(ctx, restorePelamarPengalamanKerja, idPengalamanKerja)
	return err
}

const softDeletePelamarPengalamanKerja = `-- name: SoftDeletePelamarPengalamanKerja :exec
UPDATE pelamar_pengalaman_kerja
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_pengalaman_kerja = $2
  AND deleted_at IS NULL
`

type SoftDeletePelamarPengalamanKerjaParams struct {
	DeletedBy         sql.NullString `json:"deleted_by"`
	IDPengalamanKerja string         `json:"id_pengalaman_kerja"`
}

func (q *Queries) SoftDeletePelamarPengalamanKerja(ctx context.Context, arg SoftDeletePelamarPengalamanKerjaParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePelamarPengalamanKerja, arg.DeletedBy, arg.IDPengalamanKerja)
	return err
}

const updatePelamarPengalamanKerja = `-- name: UpdatePelamarPengalamanKerja :one
UPDATE pelamar_pengalaman_kerja
SET
    nama_perusahaan = $1,
    periode = $2,
    jabatan = $3,
    gaji = $4,
    alasan_pindah = $5,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $6
WHERE id_pengalaman_kerja = $7
  AND deleted_at IS NULL
    RETURNING id, id_pengalaman_kerja, id_pelamar, nama_perusahaan, periode, jabatan, gaji, alasan_pindah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePelamarPengalamanKerjaParams struct {
	NamaPerusahaan    string         `json:"nama_perusahaan"`
	Periode           sql.NullString `json:"periode"`
	Jabatan           sql.NullString `json:"jabatan"`
	Gaji              sql.NullString `json:"gaji"`
	AlasanPindah      sql.NullString `json:"alasan_pindah"`
	UpdatedBy         sql.NullString `json:"updated_by"`
	IDPengalamanKerja string         `json:"id_pengalaman_kerja"`
}

func (q *Queries) UpdatePelamarPengalamanKerja(ctx context.Context, arg UpdatePelamarPengalamanKerjaParams) (PelamarPengalamanKerja, error) {
	row := q.db.QueryRowContext(ctx, updatePelamarPengalamanKerja,
		arg.NamaPerusahaan,
		arg.Periode,
		arg.Jabatan,
		arg.Gaji,
		arg.AlasanPindah,
		arg.UpdatedBy,
		arg.IDPengalamanKerja,
	)
	var i PelamarPengalamanKerja
	err := row.Scan(
		&i.ID,
		&i.IDPengalamanKerja,
		&i.IDPelamar,
		&i.NamaPerusahaan,
		&i.Periode,
		&i.Jabatan,
		&i.Gaji,
		&i.AlasanPindah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
