// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pegawai_keluarga.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPegawaiKeluarga = `-- name: CreatePegawaiKeluarga :one
INSERT INTO pegawai_keluarga (
    id_keluarga, id_pegawai, nama_istri_suami, jenis_kelamin, tempat_lahir,
    tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8, $9,
    (now() at time zone 'UTC')::TIMESTAMP, $10
 ) RETURNING id, id_keluarga, id_pegawai, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePegawaiKeluargaParams struct {
	IDKeluarga         string         `json:"id_keluarga"`
	IDPegawai          string         `json:"id_pegawai"`
	NamaIstriSuami     sql.NullString `json:"nama_istri_suami"`
	JenisKelamin       interface{}    `json:"jenis_kelamin"`
	TempatLahir        sql.NullString `json:"tempat_lahir"`
	TglLahir           sql.NullTime   `json:"tgl_lahir"`
	PendidikanTerakhir sql.NullString `json:"pendidikan_terakhir"`
	PekerjaanSkrg      sql.NullString `json:"pekerjaan_skrg"`
	AlamatRumah        sql.NullString `json:"alamat_rumah"`
	CreatedBy          string         `json:"created_by"`
}

func (q *Queries) CreatePegawaiKeluarga(ctx context.Context, arg CreatePegawaiKeluargaParams) (PegawaiKeluarga, error) {
	row := q.db.QueryRowContext(ctx, createPegawaiKeluarga,
		arg.IDKeluarga,
		arg.IDPegawai,
		arg.NamaIstriSuami,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.TglLahir,
		arg.PendidikanTerakhir,
		arg.PekerjaanSkrg,
		arg.AlamatRumah,
		arg.CreatedBy,
	)
	var i PegawaiKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPegawai,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPegawaiKeluargaByID = `-- name: GetPegawaiKeluargaByID :one
SELECT id, id_keluarga, id_pegawai, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_keluarga
WHERE id_keluarga = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPegawaiKeluargaByID(ctx context.Context, idKeluarga string) (PegawaiKeluarga, error) {
	row := q.db.QueryRowContext(ctx, getPegawaiKeluargaByID, idKeluarga)
	var i PegawaiKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPegawai,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPegawaiKeluarga = `-- name: ListPegawaiKeluarga :many
SELECT id, id_keluarga, id_pegawai, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_keluarga
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPegawaiKeluarga(ctx context.Context) ([]PegawaiKeluarga, error) {
	rows, err := q.db.QueryContext(ctx, listPegawaiKeluarga)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PegawaiKeluarga
	for rows.Next() {
		var i PegawaiKeluarga
		if err := rows.Scan(
			&i.ID,
			&i.IDKeluarga,
			&i.IDPegawai,
			&i.NamaIstriSuami,
			&i.JenisKelamin,
			&i.TempatLahir,
			&i.TglLahir,
			&i.PendidikanTerakhir,
			&i.PekerjaanSkrg,
			&i.AlamatRumah,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePegawaiKeluarga = `-- name: RestorePegawaiKeluarga :exec
UPDATE pegawai_keluarga
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_keluarga = $1
`

func (q *Queries) RestorePegawaiKeluarga(ctx context.Context, idKeluarga string) error {
	_, err := q.db.ExecContext(ctx, restorePegawaiKeluarga, idKeluarga)
	return err
}

const softDeletePegawaiKeluarga = `-- name: SoftDeletePegawaiKeluarga :exec
UPDATE pegawai_keluarga
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_keluarga = $2
  AND deleted_at IS NULL
`

type SoftDeletePegawaiKeluargaParams struct {
	DeletedBy  sql.NullString `json:"deleted_by"`
	IDKeluarga string         `json:"id_keluarga"`
}

func (q *Queries) SoftDeletePegawaiKeluarga(ctx context.Context, arg SoftDeletePegawaiKeluargaParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePegawaiKeluarga, arg.DeletedBy, arg.IDKeluarga)
	return err
}

const updatePegawaiKeluarga = `-- name: UpdatePegawaiKeluarga :one
UPDATE pegawai_keluarga
SET
    nama_istri_suami = $1,
    jenis_kelamin = $2,
    tempat_lahir = $3,
    tgl_lahir = $4,
    pendidikan_terakhir = $5,
    pekerjaan_skrg = $6,
    alamat_rumah = $7,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $8
WHERE id_keluarga = $9
  AND deleted_at IS NULL
    RETURNING id, id_keluarga, id_pegawai, nama_istri_suami, jenis_kelamin, tempat_lahir, tgl_lahir, pendidikan_terakhir, pekerjaan_skrg, alamat_rumah, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePegawaiKeluargaParams struct {
	NamaIstriSuami     sql.NullString `json:"nama_istri_suami"`
	JenisKelamin       interface{}    `json:"jenis_kelamin"`
	TempatLahir        sql.NullString `json:"tempat_lahir"`
	TglLahir           sql.NullTime   `json:"tgl_lahir"`
	PendidikanTerakhir sql.NullString `json:"pendidikan_terakhir"`
	PekerjaanSkrg      sql.NullString `json:"pekerjaan_skrg"`
	AlamatRumah        sql.NullString `json:"alamat_rumah"`
	UpdatedBy          sql.NullString `json:"updated_by"`
	IDKeluarga         string         `json:"id_keluarga"`
}

func (q *Queries) UpdatePegawaiKeluarga(ctx context.Context, arg UpdatePegawaiKeluargaParams) (PegawaiKeluarga, error) {
	row := q.db.QueryRowContext(ctx, updatePegawaiKeluarga,
		arg.NamaIstriSuami,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.TglLahir,
		arg.PendidikanTerakhir,
		arg.PekerjaanSkrg,
		arg.AlamatRumah,
		arg.UpdatedBy,
		arg.IDKeluarga,
	)
	var i PegawaiKeluarga
	err := row.Scan(
		&i.ID,
		&i.IDKeluarga,
		&i.IDPegawai,
		&i.NamaIstriSuami,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.TglLahir,
		&i.PendidikanTerakhir,
		&i.PekerjaanSkrg,
		&i.AlamatRumah,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
