// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pegawai_pendidikan_non_formal.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPegawaiPendidikanNonFormal = `-- name: CreatePegawaiPendidikanNonFormal :one
INSERT INTO pegawai_pendidikan_non_formal (
    id_pddk_non_formal, id_pegawai, institusi, jenis_pendidikan, kota,
    created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    (now() at time zone 'UTC')::TIMESTAMP, $6
) RETURNING id, id_pddk_non_formal, id_pegawai, institusi, jenis_pendidikan, kota, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePegawaiPendidikanNonFormalParams struct {
	IDPddkNonFormal string         `json:"id_pddk_non_formal"`
	IDPegawai       string         `json:"id_pegawai"`
	Institusi       string         `json:"institusi"`
	JenisPendidikan string         `json:"jenis_pendidikan"`
	Kota            sql.NullString `json:"kota"`
	CreatedBy       string         `json:"created_by"`
}

func (q *Queries) CreatePegawaiPendidikanNonFormal(ctx context.Context, arg CreatePegawaiPendidikanNonFormalParams) (PegawaiPendidikanNonFormal, error) {
	row := q.db.QueryRowContext(ctx, createPegawaiPendidikanNonFormal,
		arg.IDPddkNonFormal,
		arg.IDPegawai,
		arg.Institusi,
		arg.JenisPendidikan,
		arg.Kota,
		arg.CreatedBy,
	)
	var i PegawaiPendidikanNonFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkNonFormal,
		&i.IDPegawai,
		&i.Institusi,
		&i.JenisPendidikan,
		&i.Kota,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPegawaiPendidikanNonFormalByID = `-- name: GetPegawaiPendidikanNonFormalByID :one
SELECT id, id_pddk_non_formal, id_pegawai, institusi, jenis_pendidikan, kota, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_pendidikan_non_formal
WHERE id_pddk_non_formal = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetPegawaiPendidikanNonFormalByID(ctx context.Context, idPddkNonFormal string) (PegawaiPendidikanNonFormal, error) {
	row := q.db.QueryRowContext(ctx, getPegawaiPendidikanNonFormalByID, idPddkNonFormal)
	var i PegawaiPendidikanNonFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkNonFormal,
		&i.IDPegawai,
		&i.Institusi,
		&i.JenisPendidikan,
		&i.Kota,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPegawaiPendidikanNonFormal = `-- name: ListPegawaiPendidikanNonFormal :many
SELECT id, id_pddk_non_formal, id_pegawai, institusi, jenis_pendidikan, kota, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pegawai_pendidikan_non_formal
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListPegawaiPendidikanNonFormal(ctx context.Context) ([]PegawaiPendidikanNonFormal, error) {
	rows, err := q.db.QueryContext(ctx, listPegawaiPendidikanNonFormal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PegawaiPendidikanNonFormal
	for rows.Next() {
		var i PegawaiPendidikanNonFormal
		if err := rows.Scan(
			&i.ID,
			&i.IDPddkNonFormal,
			&i.IDPegawai,
			&i.Institusi,
			&i.JenisPendidikan,
			&i.Kota,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePegawaiPendidikanNonFormal = `-- name: RestorePegawaiPendidikanNonFormal :exec
UPDATE pegawai_pendidikan_non_formal
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_pddk_non_formal = $1
`

func (q *Queries) RestorePegawaiPendidikanNonFormal(ctx context.Context, idPddkNonFormal string) error {
	_, err := q.db.ExecContext(ctx, restorePegawaiPendidikanNonFormal, idPddkNonFormal)
	return err
}

const softDeletePegawaiPendidikanNonFormal = `-- name: SoftDeletePegawaiPendidikanNonFormal :exec
UPDATE pegawai_pendidikan_non_formal
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_pddk_non_formal = $2
  AND deleted_at IS NULL
`

type SoftDeletePegawaiPendidikanNonFormalParams struct {
	DeletedBy       sql.NullString `json:"deleted_by"`
	IDPddkNonFormal string         `json:"id_pddk_non_formal"`
}

func (q *Queries) SoftDeletePegawaiPendidikanNonFormal(ctx context.Context, arg SoftDeletePegawaiPendidikanNonFormalParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePegawaiPendidikanNonFormal, arg.DeletedBy, arg.IDPddkNonFormal)
	return err
}

const updatePegawaiPendidikanNonFormal = `-- name: UpdatePegawaiPendidikanNonFormal :one
UPDATE pegawai_pendidikan_non_formal
SET
    institusi = $1,
    jenis_pendidikan = $2,
    kota = $3,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $4
WHERE id_pddk_non_formal = $5
  AND deleted_at IS NULL
    RETURNING id, id_pddk_non_formal, id_pegawai, institusi, jenis_pendidikan, kota, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePegawaiPendidikanNonFormalParams struct {
	Institusi       string         `json:"institusi"`
	JenisPendidikan string         `json:"jenis_pendidikan"`
	Kota            sql.NullString `json:"kota"`
	UpdatedBy       sql.NullString `json:"updated_by"`
	IDPddkNonFormal string         `json:"id_pddk_non_formal"`
}

func (q *Queries) UpdatePegawaiPendidikanNonFormal(ctx context.Context, arg UpdatePegawaiPendidikanNonFormalParams) (PegawaiPendidikanNonFormal, error) {
	row := q.db.QueryRowContext(ctx, updatePegawaiPendidikanNonFormal,
		arg.Institusi,
		arg.JenisPendidikan,
		arg.Kota,
		arg.UpdatedBy,
		arg.IDPddkNonFormal,
	)
	var i PegawaiPendidikanNonFormal
	err := row.Scan(
		&i.ID,
		&i.IDPddkNonFormal,
		&i.IDPegawai,
		&i.Institusi,
		&i.JenisPendidikan,
		&i.Kota,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
