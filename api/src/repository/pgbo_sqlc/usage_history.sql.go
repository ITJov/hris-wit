// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: usage_history.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUsageHistory = `-- name: CreateUsageHistory :one
INSERT INTO usage_history (
    usage_history_id,
    inventaris_id,
    old_room_id,
    new_room_id,
    old_user_id,
    new_user_id,
    moved_at,
    created_at,
    created_by
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             $7,
             (now() at time zone 'UTC')::TIMESTAMP,
             $8
         )
    RETURNING id, usage_history_id, inventaris_id, old_room_id, new_room_id, old_user_id, new_user_id, moved_at, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateUsageHistoryParams struct {
	UsageHistoryID string       `json:"usage_history_id"`
	InventarisID   string       `json:"inventaris_id"`
	OldRoomID      string       `json:"old_room_id"`
	NewRoomID      string       `json:"new_room_id"`
	OldUserID      string       `json:"old_user_id"`
	NewUserID      string       `json:"new_user_id"`
	MovedAt        sql.NullTime `json:"moved_at"`
	CreatedBy      string       `json:"created_by"`
}

func (q *Queries) CreateUsageHistory(ctx context.Context, arg CreateUsageHistoryParams) (UsageHistory, error) {
	row := q.db.QueryRowContext(ctx, createUsageHistory,
		arg.UsageHistoryID,
		arg.InventarisID,
		arg.OldRoomID,
		arg.NewRoomID,
		arg.OldUserID,
		arg.NewUserID,
		arg.MovedAt,
		arg.CreatedBy,
	)
	var i UsageHistory
	err := row.Scan(
		&i.ID,
		&i.UsageHistoryID,
		&i.InventarisID,
		&i.OldRoomID,
		&i.NewRoomID,
		&i.OldUserID,
		&i.NewUserID,
		&i.MovedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getUsageHistoryByID = `-- name: GetUsageHistoryByID :one
SELECT id, usage_history_id, inventaris_id, old_room_id, new_room_id, old_user_id, new_user_id, moved_at, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM usage_history
WHERE usage_history_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetUsageHistoryByID(ctx context.Context, usageHistoryID string) (UsageHistory, error) {
	row := q.db.QueryRowContext(ctx, getUsageHistoryByID, usageHistoryID)
	var i UsageHistory
	err := row.Scan(
		&i.ID,
		&i.UsageHistoryID,
		&i.InventarisID,
		&i.OldRoomID,
		&i.NewRoomID,
		&i.OldUserID,
		&i.NewUserID,
		&i.MovedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listUsageHistory = `-- name: ListUsageHistory :many
SELECT id, usage_history_id, inventaris_id, old_room_id, new_room_id, old_user_id, new_user_id, moved_at, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM usage_history
WHERE deleted_at IS NULL
ORDER BY moved_at DESC NULLS LAST, created_at DESC
`

func (q *Queries) ListUsageHistory(ctx context.Context) ([]UsageHistory, error) {
	rows, err := q.db.QueryContext(ctx, listUsageHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsageHistory
	for rows.Next() {
		var i UsageHistory
		if err := rows.Scan(
			&i.ID,
			&i.UsageHistoryID,
			&i.InventarisID,
			&i.OldRoomID,
			&i.NewRoomID,
			&i.OldUserID,
			&i.NewUserID,
			&i.MovedAt,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreUsageHistory = `-- name: RestoreUsageHistory :exec
UPDATE usage_history
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE usage_history_id = $1
`

func (q *Queries) RestoreUsageHistory(ctx context.Context, usageHistoryID string) error {
	_, err := q.db.ExecContext(ctx, restoreUsageHistory, usageHistoryID)
	return err
}

const softDeleteUsageHistory = `-- name: SoftDeleteUsageHistory :exec
UPDATE usage_history
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE usage_history_id = $2
`

type SoftDeleteUsageHistoryParams struct {
	DeletedBy      sql.NullString `json:"deleted_by"`
	UsageHistoryID string         `json:"usage_history_id"`
}

func (q *Queries) SoftDeleteUsageHistory(ctx context.Context, arg SoftDeleteUsageHistoryParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteUsageHistory, arg.DeletedBy, arg.UsageHistoryID)
	return err
}

const updateUsageHistory = `-- name: UpdateUsageHistory :one
UPDATE usage_history
SET
    inventaris_id = $1,
    old_room_id = $2,
    new_room_id = $3,
    old_user_id = $4,
    new_user_id = $5,
    moved_at = $6,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $7
WHERE usage_history_id = $8
  AND deleted_at IS NULL
    RETURNING id, usage_history_id, inventaris_id, old_room_id, new_room_id, old_user_id, new_user_id, moved_at, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateUsageHistoryParams struct {
	InventarisID   string         `json:"inventaris_id"`
	OldRoomID      string         `json:"old_room_id"`
	NewRoomID      string         `json:"new_room_id"`
	OldUserID      string         `json:"old_user_id"`
	NewUserID      string         `json:"new_user_id"`
	MovedAt        sql.NullTime   `json:"moved_at"`
	UpdatedBy      sql.NullString `json:"updated_by"`
	UsageHistoryID string         `json:"usage_history_id"`
}

func (q *Queries) UpdateUsageHistory(ctx context.Context, arg UpdateUsageHistoryParams) (UsageHistory, error) {
	row := q.db.QueryRowContext(ctx, updateUsageHistory,
		arg.InventarisID,
		arg.OldRoomID,
		arg.NewRoomID,
		arg.OldUserID,
		arg.NewUserID,
		arg.MovedAt,
		arg.UpdatedBy,
		arg.UsageHistoryID,
	)
	var i UsageHistory
	err := row.Scan(
		&i.ID,
		&i.UsageHistoryID,
		&i.InventarisID,
		&i.OldRoomID,
		&i.NewRoomID,
		&i.OldUserID,
		&i.NewUserID,
		&i.MovedAt,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
