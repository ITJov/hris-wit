// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pelamar_anak.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPelamarAnak = `-- name: CreatePelamarAnak :one
INSERT INTO pelamar_anak (
    id_anak, id_pelamar, nama, jenis_kelamin, tempat_lahir,
    pendidikan_pekerjaan, tgl_lahir, created_at, created_by
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, (now() at time zone 'UTC')::TIMESTAMP, $8
) RETURNING id, id_anak, id_pelamar, nama, jenis_kelamin, tempat_lahir, pendidikan_pekerjaan, tgl_lahir, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreatePelamarAnakParams struct {
	IDAnak              string         `json:"id_anak"`
	IDPelamar           string         `json:"id_pelamar"`
	Nama                string         `json:"nama"`
	JenisKelamin        interface{}    `json:"jenis_kelamin"`
	TempatLahir         sql.NullString `json:"tempat_lahir"`
	PendidikanPekerjaan sql.NullString `json:"pendidikan_pekerjaan"`
	TglLahir            sql.NullTime   `json:"tgl_lahir"`
	CreatedBy           string         `json:"created_by"`
}

func (q *Queries) CreatePelamarAnak(ctx context.Context, arg CreatePelamarAnakParams) (PelamarAnak, error) {
	row := q.db.QueryRowContext(ctx, createPelamarAnak,
		arg.IDAnak,
		arg.IDPelamar,
		arg.Nama,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.PendidikanPekerjaan,
		arg.TglLahir,
		arg.CreatedBy,
	)
	var i PelamarAnak
	err := row.Scan(
		&i.ID,
		&i.IDAnak,
		&i.IDPelamar,
		&i.Nama,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.PendidikanPekerjaan,
		&i.TglLahir,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getPelamarAnakByID = `-- name: GetPelamarAnakByID :one
SELECT id, id_anak, id_pelamar, nama, jenis_kelamin, tempat_lahir, pendidikan_pekerjaan, tgl_lahir, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_anak WHERE id_anak = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPelamarAnakByID(ctx context.Context, idAnak string) (PelamarAnak, error) {
	row := q.db.QueryRowContext(ctx, getPelamarAnakByID, idAnak)
	var i PelamarAnak
	err := row.Scan(
		&i.ID,
		&i.IDAnak,
		&i.IDPelamar,
		&i.Nama,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.PendidikanPekerjaan,
		&i.TglLahir,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listPelamarAnak = `-- name: ListPelamarAnak :many
SELECT id, id_anak, id_pelamar, nama, jenis_kelamin, tempat_lahir, pendidikan_pekerjaan, tgl_lahir, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM pelamar_anak WHERE deleted_at IS NULL ORDER BY created_at DESC
`

func (q *Queries) ListPelamarAnak(ctx context.Context) ([]PelamarAnak, error) {
	rows, err := q.db.QueryContext(ctx, listPelamarAnak)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PelamarAnak
	for rows.Next() {
		var i PelamarAnak
		if err := rows.Scan(
			&i.ID,
			&i.IDAnak,
			&i.IDPelamar,
			&i.Nama,
			&i.JenisKelamin,
			&i.TempatLahir,
			&i.PendidikanPekerjaan,
			&i.TglLahir,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restorePelamarAnak = `-- name: RestorePelamarAnak :exec
UPDATE pelamar_anak
SET
    deleted_at = NULL,
    deleted_by = NULL
WHERE id_anak = $1
`

func (q *Queries) RestorePelamarAnak(ctx context.Context, idAnak string) error {
	_, err := q.db.ExecContext(ctx, restorePelamarAnak, idAnak)
	return err
}

const softDeletePelamarAnak = `-- name: SoftDeletePelamarAnak :exec
UPDATE pelamar_anak
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE id_anak = $2 AND deleted_at IS NULL
`

type SoftDeletePelamarAnakParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	IDAnak    string         `json:"id_anak"`
}

func (q *Queries) SoftDeletePelamarAnak(ctx context.Context, arg SoftDeletePelamarAnakParams) error {
	_, err := q.db.ExecContext(ctx, softDeletePelamarAnak, arg.DeletedBy, arg.IDAnak)
	return err
}

const updatePelamarAnak = `-- name: UpdatePelamarAnak :one
UPDATE pelamar_anak
SET
    nama = $1,
    jenis_kelamin = $2,
    tempat_lahir = $3,
    pendidikan_pekerjaan = $4,
    tgl_lahir = $5,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $6
WHERE id_anak = $7 AND deleted_at IS NULL
    RETURNING id, id_anak, id_pelamar, nama, jenis_kelamin, tempat_lahir, pendidikan_pekerjaan, tgl_lahir, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdatePelamarAnakParams struct {
	Nama                string         `json:"nama"`
	JenisKelamin        interface{}    `json:"jenis_kelamin"`
	TempatLahir         sql.NullString `json:"tempat_lahir"`
	PendidikanPekerjaan sql.NullString `json:"pendidikan_pekerjaan"`
	TglLahir            sql.NullTime   `json:"tgl_lahir"`
	UpdatedBy           sql.NullString `json:"updated_by"`
	IDAnak              string         `json:"id_anak"`
}

func (q *Queries) UpdatePelamarAnak(ctx context.Context, arg UpdatePelamarAnakParams) (PelamarAnak, error) {
	row := q.db.QueryRowContext(ctx, updatePelamarAnak,
		arg.Nama,
		arg.JenisKelamin,
		arg.TempatLahir,
		arg.PendidikanPekerjaan,
		arg.TglLahir,
		arg.UpdatedBy,
		arg.IDAnak,
	)
	var i PelamarAnak
	err := row.Scan(
		&i.ID,
		&i.IDAnak,
		&i.IDPelamar,
		&i.Nama,
		&i.JenisKelamin,
		&i.TempatLahir,
		&i.PendidikanPekerjaan,
		&i.TglLahir,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
